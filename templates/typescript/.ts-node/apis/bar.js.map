{"version":3,"file":"bar.js","sourceRoot":"","sources":["../../app/apis/bar.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAuC;AACvC,gDAAoD;AACpD,wCAAiD;AASpC,QAAA,MAAM,GAAG,IAAI,0BAAc,CAAc,KAAK,EAAE,UAAC,MAAM,EAAE,KAAK;IACvE,IAAM,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sGAA2D,CAAC;IAC7E,IAAM,YAAY,GAAG,IAAI,eAAe,CAAC,MAAa,CAAC,CAAC;IACxD,IAAM,eAAe,GAAG,WAAW,CAAC,YAAY,CAAC,CAAC;IAClD,OAAO,CAAC,yEAAO,EAA6E,EAAE,EAAe;;YAA5F,eAAqB,EAArB,OAAO,mBAAG,WAAW,KAAA,EAAE,aAAS,EAAT,KAAK,mBAAG,CAAC,KAAA,EAAE,gBAAY,EAAZ,QAAQ,mBAAG,CAAC,KAAA,EAAE,cAAW,EAAX,MAAM,mBAAG,EAAE,KAAA;YAAoB,MAAM,YAAA,EAAE,GAAG,SAAA;;;;oBACjG,KAAK,GAAG,GAAG,iSAAC,+BAEd,EAAmD,6BACnD,EAA4C,iBACzC,EAAgC,4CAErB,EAAQ,iCACJ,EAAM,qBACjB,EAA4C,uBAC/C,EAAK,UACd,KARK,uBAAe,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,EACnD,uBAAe,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,EACzC,uBAAe,CAAC,WAAW,CAAC,IAAI,EAErB,QAAQ,EACJ,MAAM,EACjB,uBAAe,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,EAC/C,KAAK,CACd,CAAC;oBACa,qBAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAMpC,KAAK,CAAC,EAAA;;oBANH,IAAI,GAAG,SAMJ;oBACT,sBAAO,IAAI,EAAC;;;SACf,CAAC,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;AAC/B,CAAC,EAAE,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAEC,IAAI,CAAC,KAAK,CAAC,sjBAAsjB,CAAQ;;;;;;;;EAE1kB,CAAC","sourcesContent":["import ____moose____typia from \"typia\";\nimport { ConsumptionApi } from \"@514labs/moose-lib\";\nimport { BarAggregatedMV } from \"../views/views\";\nimport { tags } from \"typia\";\n// This file is where you can define your APIs to consume your data\ninterface QueryParams {\n    orderBy?: \"totalRows\" | \"rowsWithText\" | \"maxTextLength\" | \"totalTextLength\";\n    limit?: number;\n    startDay?: number & tags.Type<\"int32\">;\n    endDay?: number & tags.Type<\"int32\">;\n}\nexport const BarApi = new ConsumptionApi<QueryParams>(\"bar\", (params, utils) => {\n    const assertGuard = ____moose____typia.http.createAssertQuery<QueryParams>();\n    const searchParams = new URLSearchParams(params as any);\n    const processedParams = assertGuard(searchParams);\n    return (async ({ orderBy = \"totalRows\", limit = 5, startDay = 1, endDay = 31, }: QueryParams, { client, sql }) => {\n        const query = sql `\n        SELECT \n          ${BarAggregatedMV.targetTable.columns.dayOfMonth.name} as dayOfMonth,\n          ${BarAggregatedMV.targetTable.columns[orderBy]}\n        FROM ${BarAggregatedMV.targetTable.name}\n        WHERE \n          dayOfMonth >= ${startDay} \n          AND dayOfMonth <= ${endDay}\n        ORDER BY ${BarAggregatedMV.targetTable.columns[orderBy]} DESC\n        LIMIT ${limit}\n      `;\n        const data = await client.query.execute<{\n            dayOfMonth: number;\n            totalRows?: number;\n            rowsWithText?: number;\n            maxTextLength?: number;\n            totalTextLength?: number;\n        }>(query);\n        return data;\n    })(processedParams, utils);\n}, {}, ____moose____typia.json.schemas<[\n    QueryParams\n]>(), JSON.parse(\"[{\\\"name\\\":\\\"orderBy\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"limit\\\",\\\"data_type\\\":\\\"Float\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"startDay\\\",\\\"data_type\\\":\\\"Float\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"endDay\\\",\\\"data_type\\\":\\\"Float\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]}]\") as any, ____moose____typia.json.schemas<[\n    any\n]>());\n"]}