name: Release CLI

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/release-cli.yaml"
      - "apps/igloo-cli-npm/**"
      - "apps/moose-cli-npm/**"
      - "apps/igloo-kit-cli/**"
      - "apps/create-igloo-app/**"
      - "apps/create-moose-app/**"
      - "packages/**"
  workflow_dispatch:
    inputs:
      dry-run:
        type: boolean
        description: "Run the release in dry-run mode"
        required: true
        default: true

jobs:
  version:
    concurrency: release
    if: ${{ ! contains(github.event.head_commit.message , '[no-release]') }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Generate Version
        id: version
        run: |
          ./scripts/version.js ${{ github.sha }} >> "$GITHUB_OUTPUT"

      - name: Create Release
        uses: ncipollo/release-action@v1
        if: ${{ !inputs.dry-run }}
        with:
          tag: v${{ steps.version.outputs.VERSION }}
          generateReleaseNotes: true
          commit: ${{ github.sha }}

  build-and-publish-binaries:
    name: Build CLI Binaries
    runs-on: ${{ matrix.build.os }}
    needs: version
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    outputs:
      version: ${{ steps.version.outputs.version }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - {
              NAME: linux-x64-glibc,
              OS: ubuntu-20.04,
              TOOLCHAIN: stable,
              TARGET: x86_64-unknown-linux-gnu,
            }
          - {
              NAME: linux-arm64-glibc,
              OS: ubuntu-20.04,
              TOOLCHAIN: stable,
              TARGET: aarch64-unknown-linux-gnu,
            }
          - {
              NAME: darwin-x64,
              OS: macos-11,
              TOOLCHAIN: stable,
              TARGET: x86_64-apple-darwin,
            }
          - {
              NAME: darwin-arm64,
              OS: macos-11,
              TOOLCHAIN: stable,
              TARGET: aarch64-apple-darwin,
            }
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.build.TOOLCHAIN }}
          target: ${{ matrix.build.TARGET }}

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Install Set Version
        run: |
          cargo install cargo-edit
          cargo set-version ${{ needs.version.outputs.version }}
        working-directory: ./apps/igloo-kit-cli

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          # --features rdkafka/cmake-build is necessary for cross compilation builds
          args: --manifest-path ./apps/igloo-kit-cli/Cargo.toml --features rdkafka/cmake-build --release --locked --target ${{ matrix.build.TARGET }}
          use-cross: ${{ matrix.build.OS == 'ubuntu-20.04' }} # use `cross` for Linux builds

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"

      # TO Be DELETED when migration to new name is over
      - name: Publish to NPM Igloo
        if: ${{ !inputs.dry-run }}
        shell: bash
        working-directory: ./apps/igloo-cli-npm
        run: ./scripts/release-bin.sh ${{ needs.version.outputs.version }} ${{ matrix.build.TARGET }} ${{ matrix.build.OS }} ${{ matrix.build.NAME }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to NPM Moose
        if: ${{ !inputs.dry-run }}
        shell: bash
        working-directory: ./apps/moose-cli-npm
        run: ./scripts/release-bin.sh ${{ needs.version.outputs.version }} ${{ matrix.build.TARGET }} ${{ matrix.build.OS }} ${{ matrix.build.NAME }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Upload binary
        uses: ncipollo/release-action@v1
        if: ${{ !inputs.dry-run }}
        with:
          tag: v${{ needs.version.outputs.version }}
          allowUpdates: "true"
          replacesArtifacts: "false"
          artifacts: |
            ./apps/igloo-kit-cli/target/${{ matrix.build.TARGET }}/release/igloo-cli-${{ matrix.build.TARGET }}

  publish-npm-base:
    name: Publish the base NPM package
    needs:
      - version
      - build-and-publish-binaries
    runs-on: ubuntu-20.04
    if: ${{ !inputs.dry-run }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 100

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Login GSAP
        shell: bash
        run: |
          pnpm config set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "pnpm"

      # TO Be DELETED when migration to new name is over
      - name: Publish the NPM Igloo CLI package
        shell: bash
        run: ./apps/igloo-cli-npm/scripts/release-cli.sh ${{ needs.version.outputs.version }}

      # TO Be DELETED when migration to new name is over
      - name: Publish the NPM Igloo create app package
        shell: bash
        run: ./apps/create-igloo-app/scripts/release.sh ${{ needs.version.outputs.version }}

      - name: Publish the NPM Moose CLI package
        shell: bash
        run: ./apps/moose-cli-npm/scripts/release-cli.sh ${{ needs.version.outputs.version }}

      - name: Publish the NPM Moose create app package
        shell: bash
        run: ./apps/create-moose-app/scripts/release.sh ${{ needs.version.outputs.version }}

      - name: Notify Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_IGLOO_CLI_PROJECT }}
        with:
          environment: production
          version: ${{ needs.version.outputs.version }}
