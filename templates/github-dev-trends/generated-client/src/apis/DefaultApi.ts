/* tslint:disable */
/* eslint-disable */
/**
 * live-dev-trends API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ConsumptionTopicTimeseriesGet200ResponseInner,
  WatchEvent,
  WatchEventWithRepo,
} from "../models/index";
import {
  ConsumptionTopicTimeseriesGet200ResponseInnerFromJSON,
  ConsumptionTopicTimeseriesGet200ResponseInnerToJSON,
  WatchEventFromJSON,
  WatchEventToJSON,
  WatchEventWithRepoFromJSON,
  WatchEventWithRepoToJSON,
} from "../models/index";

export interface ConsumptionTopicTimeseriesGetRequest {
  interval?: string;
  limit?: number;
  exclude?: string;
}

export interface IngestWatchEvent00PostRequest {
  watchEvent: WatchEvent;
}

export interface IngestWatchEventWithRepo00PostRequest {
  watchEventWithRepo: WatchEventWithRepo;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Egress endpoint for topicTimeseries
   */
  async consumptionTopicTimeseriesGetRaw(
    requestParameters: ConsumptionTopicTimeseriesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<
    runtime.ApiResponse<Array<ConsumptionTopicTimeseriesGet200ResponseInner>>
  > {
    const queryParameters: any = {};

    if (requestParameters["interval"] != null) {
      queryParameters["interval"] = requestParameters["interval"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["exclude"] != null) {
      queryParameters["exclude"] = requestParameters["exclude"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/consumption/topicTimeseries`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ConsumptionTopicTimeseriesGet200ResponseInnerFromJSON),
    );
  }

  /**
   * Egress endpoint for topicTimeseries
   */
  async consumptionTopicTimeseriesGet(
    requestParameters: ConsumptionTopicTimeseriesGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<ConsumptionTopicTimeseriesGet200ResponseInner>> {
    const response = await this.consumptionTopicTimeseriesGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Ingress endpoint for WatchEvent
   */
  async ingestWatchEvent00PostRaw(
    requestParameters: IngestWatchEvent00PostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["watchEvent"] == null) {
      throw new runtime.RequiredError(
        "watchEvent",
        'Required parameter "watchEvent" was null or undefined when calling ingestWatchEvent00Post().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/ingest/WatchEvent/0.0`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: WatchEventToJSON(requestParameters["watchEvent"]),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Ingress endpoint for WatchEvent
   */
  async ingestWatchEvent00Post(
    requestParameters: IngestWatchEvent00PostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.ingestWatchEvent00PostRaw(requestParameters, initOverrides);
  }

  /**
   * Ingress endpoint for WatchEventWithRepo
   */
  async ingestWatchEventWithRepo00PostRaw(
    requestParameters: IngestWatchEventWithRepo00PostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["watchEventWithRepo"] == null) {
      throw new runtime.RequiredError(
        "watchEventWithRepo",
        'Required parameter "watchEventWithRepo" was null or undefined when calling ingestWatchEventWithRepo00Post().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/ingest/WatchEventWithRepo/0.0`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: WatchEventWithRepoToJSON(requestParameters["watchEventWithRepo"]),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Ingress endpoint for WatchEventWithRepo
   */
  async ingestWatchEventWithRepo00Post(
    requestParameters: IngestWatchEventWithRepo00PostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.ingestWatchEventWithRepo00PostRaw(
      requestParameters,
      initOverrides,
    );
  }
}
