{"version":3,"file":"getAircraftPositions.js","sourceRoot":"","sources":["../../app/apis/getAircraftPositions.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAuC;AACvC,gDAAoD;AAapD;;;GAGG;AACU,QAAA,oBAAoB,GAAG,IAAI,0BAAc,CAA0B,sBAAsB,EAAE,UAAC,MAAM,EAAE,KAAK;IAClH,IAAM,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sGAAuE,CAAC;IACzF,IAAM,YAAY,GAAG,IAAI,eAAe,CAAC,MAAa,CAAC,CAAC;IACxD,IAAM,eAAe,GAAG,WAAW,CAAC,YAAY,CAAC,CAAC;IAClD,OAAO,CAAC,UAAO,MAAM,EAAE,KAAK;;;;;;oBAChB,MAAM,GAAU,KAAK,OAAf,EAAE,GAAG,GAAK,KAAK,IAAV,CAAW;oBAExB,KAAK,GAAG,MAAA,MAAM,CAAC,KAAK,mCAAI,GAAG,CAAC;oBAE9B,KAAK,GAAG,GAAG,wiBAAC,qeAiBnB,IAAA,CAAC;oBACE,0CAA0C;oBAC1C,IAAI,MAAM,CAAC,WAAW,KAAK,SAAS,EAAE,CAAC;wBACnC,KAAK,GAAG,GAAG,8FAAC,EAAG,EAAK,mBAAoB,EAAkB,EAAE,KAA7C,KAAK,EAAoB,MAAM,CAAC,WAAW,CAAE,CAAC;oBACjE,CAAC;oBACD,0CAA0C;oBAC1C,IAAI,MAAM,CAAC,WAAW,KAAK,SAAS,EAAE,CAAC;wBACnC,KAAK,GAAG,GAAG,8FAAC,EAAG,EAAK,mBAAoB,EAAkB,EAAE,KAA7C,KAAK,EAAoB,MAAM,CAAC,WAAW,CAAE,CAAC;oBACjE,CAAC;oBACD,yBAAyB;oBACzB,KAAK,GAAG,GAAG,wIAAC,UACZ,EAAK,+CAEC,EAAK,QACd,KAHG,KAAK,EAEC,KAAK,CACd,CAAC;oBAES,qBAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAA;;gBADxC,uCAAuC;gBACvC,sBAAO,SAAiC,EAAC;;;SAC5C,CAAC,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;AAC/B,CAAC,EAAE,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAEC,IAAI,CAAC,KAAK,CAAC,0aAA0a,CAAQ;;;;;;;;EAE9b,CAAC","sourcesContent":["import ____moose____typia from \"typia\";\nimport { ConsumptionApi } from \"@514labs/moose-lib\";\nimport { tags } from \"typia\";\n/**\n * Parameters for the aircraft positions API\n */\ninterface AircraftPositionsParams {\n    /** Maximum number of aircraft to return (1-1000) */\n    limit?: number & tags.Type<\"int64\"> & tags.Minimum<1> & tags.Maximum<1000>;\n    /** Minimum altitude in feet to filter by (optional) */\n    minAltitude?: number & tags.Type<\"int64\"> & tags.Minimum<0>;\n    /** Maximum altitude in feet to filter by (optional) */\n    maxAltitude?: number & tags.Type<\"int64\"> & tags.Minimum<0>;\n}\n/**\n * API to retrieve current positions and details of all active aircraft\n * Returns aircraft locations, altitude, speed, and identifying information\n */\nexport const getAircraftPositions = new ConsumptionApi<AircraftPositionsParams>(\"getAircraftPositions\", (params, utils) => {\n    const assertGuard = ____moose____typia.http.createAssertQuery<AircraftPositionsParams>();\n    const searchParams = new URLSearchParams(params as any);\n    const processedParams = assertGuard(searchParams);\n    return (async (params, utils) => {\n        const { client, sql } = utils;\n        // Set default limit if not provided\n        const limit = params.limit ?? 100;\n        // Build the query with conditional altitude filters\n        let query = sql `\n      SELECT \n        hex,\n        flight,\n        aircraft_type,\n        category,\n        lat,\n        lon,\n        alt_baro as altitude,\n        gs as ground_speed,\n        track as heading,\n        emergency,\n        alt_baro_is_ground as is_on_ground,\n        timestamp\n      FROM AircraftTrackingProcessed\n      WHERE lat != 0 AND lon != 0  -- Filter out invalid positions\n        AND timestamp >= now() - INTERVAL 30 SECOND  -- Only show recent aircraft\n    `;\n        // Add minimum altitude filter if provided\n        if (params.minAltitude !== undefined) {\n            query = sql `${query} AND alt_baro >= ${params.minAltitude}`;\n        }\n        // Add maximum altitude filter if provided\n        if (params.maxAltitude !== undefined) {\n            query = sql `${query} AND alt_baro <= ${params.maxAltitude}`;\n        }\n        // Add ordering and limit\n        query = sql `\n      ${query}\n      ORDER BY timestamp DESC\n      LIMIT ${limit}\n    `;\n        // Execute the query and return results\n        return await client.query.execute(query);\n    })(processedParams, utils);\n}, {}, ____moose____typia.json.schemas<[\n    AircraftPositionsParams\n]>(), JSON.parse(\"[{\\\"name\\\":\\\"limit\\\",\\\"data_type\\\":\\\"Int\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"minAltitude\\\",\\\"data_type\\\":\\\"Int\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"maxAltitude\\\",\\\"data_type\\\":\\\"Int\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]}]\") as any, ____moose____typia.json.schemas<[\n    any\n]>());\n"]}