{"version":3,"file":"1.fetchEvents.js","sourceRoot":"","sources":["../../../app/scripts/getGithubEvents/1.fetchEvents.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,6BAOC;AApDD,qCAA4C;AAG5C,IAAM,OAAO,GAAG,IAAA,qBAAa,GAAE,CAAC;AAEhC,8DAA8D;AAC9D,yCAAyC;AACzC,IAAM,IAAI,GAAiB,UAAO,KAAW;;;;;oBACzB,qBAAM,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAC/C,OAAO,CAAC,QAAQ,CAAC,gBAAgB,EACjC;oBACE,QAAQ,EAAE,GAAG;iBACd,CACF,EAAA;;gBALK,SAAS,GAAG,SAKjB;;;;2BAE4B,cAAA,cAAA,SAAS,CAAA;;;;;gBAAT,yBAAS;gBAAT,WAAS;gBAArB,QAAQ,KAAA,CAAA;sBACU,EAAb,KAAA,QAAQ,CAAC,IAAI;;;qBAAb,CAAA,cAAa,CAAA;gBAA5B;gBACK,OAAO,GAAG;oBACd,SAAS,EAAE,OAAK,CAAC,IAAI;oBACrB,OAAO,EAAE,OAAK,CAAC,EAAE;oBACjB,UAAU,EAAE,OAAK,CAAC,KAAK,CAAC,KAAK;oBAC7B,OAAO,EAAE,OAAK,CAAC,KAAK,CAAC,EAAE;oBACvB,QAAQ,EAAE,OAAK,CAAC,KAAK,CAAC,GAAG;oBACzB,cAAc,EAAE,OAAK,CAAC,KAAK,CAAC,UAAU;oBACtC,YAAY,EAAE,OAAK,CAAC,IAAI,CAAC,IAAI;oBAC7B,SAAS,EAAE,OAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACxC,QAAQ,EAAE,OAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACvC,OAAO,EAAE,OAAK,CAAC,IAAI,CAAC,GAAG;oBACvB,MAAM,EAAE,OAAK,CAAC,IAAI,CAAC,EAAE;oBACrB,SAAS,EAAE,OAAK,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;iBAC1D,CAAC;gBAEd,qBAAM,KAAK,CAAC,sCAAsC,EAAE;wBAClD,MAAM,EAAE,MAAM;wBACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;qBAC9B,CAAC,EAAA;;gBAHF,SAGE,CAAC;;;gBAnBa,IAAa,CAAA;;;;;;;;;;;;;;;;;;;;;;qBAuBnC,sBAAO;oBACL,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,EAAE;iBACT,EAAC;;;KACH,CAAC;AAEF,SAAwB,UAAU;IAChC,OAAO;QACL,IAAI,EAAE,IAAI;QACV,MAAM,EAAE;YACN,OAAO,EAAE,CAAC;SACX;KACgB,CAAC;AACtB,CAAC","sourcesContent":["import { TaskFunction, TaskDefinition } from \"@514labs/moose-lib\";\nimport { createOctokit } from \"../../utils\";\nimport { IGhEvent } from \"../../ingest/models\";\n\nconst octokit = createOctokit();\n\n// The initial input data and data passed between tasks can be\n// defined in the task function parameter\nconst load: TaskFunction = async (input?: any) => {\n  const responses = await octokit.paginate.iterator(\n    octokit.activity.listPublicEvents,\n    {\n      per_page: 100,\n    },\n  );\n\n  for await (const response of responses) {\n    for (const event of response.data) {\n        const ghEvent = {\n          eventType: event.type,\n          eventId: event.id,\n          actorLogin: event.actor.login,\n          actorId: event.actor.id,\n          actorUrl: event.actor.url,\n          actorAvatarUrl: event.actor.avatar_url,\n          repoFullName: event.repo.name,\n          repoOwner: event.repo.name.split(\"/\")[0],\n          repoName: event.repo.name.split(\"/\")[1],\n          repoUrl: event.repo.url,\n          repoId: event.repo.id,\n          createdAt: event.created_at ? new Date(event.created_at) : new Date(),\n        } as IGhEvent;\n\n        await fetch(\"http://localhost:4000/ingest/GhEvent\", {\n          method: \"POST\",\n          body: JSON.stringify(ghEvent),\n        });\n    }\n  }\n\n  return {\n    task: \"load\",\n    data: {},\n  };\n};\n\nexport default function createTask() {\n  return {\n    task: load,\n    config: {\n      retries: 3,\n    },\n  } as TaskDefinition;\n}\n"]}