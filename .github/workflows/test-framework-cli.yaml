name: Test Framework CLI

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]

defaults:
  run:
    working-directory: ./apps/framework-cli

jobs:
  # Initial check for changes
  detect-changes:
    runs-on: ubuntu-latest
    # Add explicit read-only permissions
    permissions:
      contents: read
    outputs:
      should_run: ${{ steps.check-changes.outputs.should_run }}
    defaults:
      run:
        working-directory: .
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          fetch-tags: true

      - name: Fetch main branch
        run: git fetch origin main:main

      - name: Check for relevant changes
        id: check-changes
        shell: bash
        run: |
          # Define patterns to check - one per line for readability
          PATTERNS=(
            "^\.github/workflows/test-framework-cli\.yaml"
            "^apps/framework-cli-e2e/"
            "^apps/framework-cli/"
            "^templates/python/"
            "^templates/typescript/"
            "^packages/"
            "Cargo.lock"
            "pnpm-lock.yaml"
          )

          # Join patterns with | for grep
          GREP_PATTERN=$(IFS="|"; echo "${PATTERNS[*]}")

          # Get changed files between main and current branch
          git diff --name-only origin/main...HEAD > changes.txt

          echo "::group::🔍 All Changed Files"
          cat changes.txt
          echo "::endgroup::"

          echo "::group::📋 Files Matching Patterns"
          echo "Looking for files matching these patterns:"
          printf '%s\n' "${PATTERNS[@]}"
          echo "---"
          echo "Matching files:"
          grep -E "${GREP_PATTERN}" changes.txt || echo "No files match patterns"
          echo "::endgroup::"

          # Check if any relevant files were changed
          if grep -q -E "${GREP_PATTERN}" changes.txt; then
            echo "::notice title=✅ Running Tests::Detected relevant changes in the codebase. Tests will run."
            echo "should_run=true" >> $GITHUB_OUTPUT 
          else
            echo "::notice title=⏭️ Skipping Tests::No relevant changes detected. Tests will be skipped."
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  check:
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run == 'true'
    name: Check
    runs-on: ubuntu-22-8-core
    # Add explicit read-only permissions
    permissions:
      contents: read
    steps:
      - name: Install Protoc (Needed for Temporal)
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "23.x"

      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Run cargo check
        run: cargo check

      - name: Check for unused dependencies
        uses: bnjbvr/cargo-machete@main

      - name: Run cargo Build in release mode
        run: cargo build --release --locked

  test-macos:
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run == 'true'
    name: Test Suite (MacOS, Node ${{ matrix.node-version }})
    # Add explicit read-only permissions
    permissions:
      contents: read
    env:
      RUST_BACKTRACE: full
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [20, 22, 24]
    steps:
      - name: Install Protoc (Needed for Temporal)
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "23.x"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: pnpm/action-setup@v4

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Run pnpm install
        run: pnpm install --filter=@repo/scripts # for package-templates.js

      - name: Run Tests
        run: cargo test
        env:
          MOOSE_TELEMETRY_ENABLED: false

      - name: Inspect Logs
        if: always()
        run: |
          cat ~/.moose/*-cli.log

  test-ubuntu:
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run == 'true'
    name: Test Suite (Ubuntu, Node ${{ matrix.node-version }})
    runs-on: ubuntu-4
    # Add explicit read-only permissions
    permissions:
      contents: read
    env:
      RUST_BACKTRACE: full
    strategy:
      fail-fast: false
      matrix:
        node-version: [20, 22, 24]
    steps:
      - name: Install Protoc (Needed for Temporal)
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "23.x"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: pnpm/action-setup@v4

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Run pnpm install
        run: pnpm install --filter=@repo/scripts # for package-templates.js

      - name: Run Tests
        run: cargo test
        env:
          MOOSE_TELEMETRY_ENABLED: false

      - name: Run ts moose lib tests
        run: pnpm install --frozen-lockfile && pnpm --filter=@514labs/moose-lib run test
        env:
          MOOSE_TELEMETRY_ENABLED: false

      - name: Run e2e Tests
        run: pnpm install --frozen-lockfile && pnpm --filter=framework-cli-e2e run test
        env:
          MOOSE_TELEMETRY_ENABLED: false

      - name: Inspect Logs
        if: always()
        run: |
          cat ~/.moose/*-cli.log

  lints:
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run == 'true'
    name: Lints
    runs-on: ubuntu-latest
    # Add explicit read-only permissions
    permissions:
      contents: read
    steps:
      - name: Install Protoc (Needed for Temporal)
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "23.x"

      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy

      # to trigger code gen
      - name: Run cargo build
        run: cargo build

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy -- -D warnings

  # Final status check that depends on all jobs
  changes:
    runs-on: ubuntu-latest
    needs: [detect-changes, check, test-macos, test-ubuntu, lints]
    if: always()
    # Add explicit read-only permissions
    permissions:
      contents: read
    defaults:
      run:
        working-directory: .
    steps:
      - name: Check final status
        shell: bash
        run: |
          if [[ "${{ needs.detect-changes.outputs.should_run }}" == "false" ]]; then
            echo "No relevant changes detected, marking as success"
            exit 0
          fi

          # Check if any required jobs failed
          if [[ "${{ needs.check.result }}" == "failure" ]] || \
             [[ "${{ needs.test-macos.result }}" == "failure" ]] || \
             [[ "${{ needs.test-ubuntu.result }}" == "failure" ]] || \
             [[ "${{ needs.lints.result }}" == "failure" ]]; then
            echo "One or more required jobs failed"
            exit 1
          fi

          if [[ "${{ needs.check.result }}" == "success" ]] && \
             [[ "${{ needs.test-macos.result }}" == "success" ]] && \
             [[ "${{ needs.test-ubuntu.result }}" == "success" ]] && \
             [[ "${{ needs.lints.result }}" == "success" ]]; then
            echo "All required jobs succeeded"
            exit 0
          fi

          echo "Unexpected state in dependent jobs"
          exit 1

  notify-slack-on-failure:
    needs: [changes]
    runs-on: ubuntu-latest
    # Add explicit read-only permissions
    permissions:
      contents: read
    if: failure() && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: .
    steps:
      - name: Notify Slack on failure
        uses: 514-labs/slack-notification-action@1.0.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          slack-webhook-url: ${{ secrets.SLACK_GITHUB_ACTIONS_WEBHOOK_URL }}
