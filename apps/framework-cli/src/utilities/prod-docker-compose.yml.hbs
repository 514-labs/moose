volumes:
{{#if streaming_engine}}
  redpanda-0: null
{{/if}}
{{#if storage}}
  clickhouse-0-data: null
  clickhouse-0-logs: null
  clickhouse-0-users: null
  clickhouse-keeper-data: null
{{/if}}
  redis-data: null
{{#if scripts_feature}}
  temporal-data: null
  postgresql-data: null
{{/if}}

{{#if scripts_feature}}
configs:
  temporal-config:
    # Using the "content" property to inline the config
    content: |
      limit.maxIDLength:
        - value: 255
          constraints: {}
      system.forceSearchAttributesCacheRefreshOnRead:
        - value: true  # Dev setup only. Please don't turn this on in production.
          constraints: {}
{{/if}}

services:
  redis:
    image: redis:latest
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    deploy:
      resources:
        reservations:
          cpus: '2.0'
          memory: 4G

{{#if streaming_engine}}
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v24.3.11
    ports:
      # Internal listener stays internal to the docker network; no host binding to avoid conflicts
      # External listener is parameterized to allow multiple projects concurrently
      - "{{redpanda_broker_port}}:19092"
    volumes:
      - redpanda-0:/var/lib/redpanda/data
    command:
      - redpanda
      - start
      - --kafka-addr=internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr=internal://redpanda:9092,external://{{redpanda_broker_host}}:{{redpanda_broker_port}}
      - --pandaproxy-addr=internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr=internal://redpanda:8082,external://{{redpanda_broker_host}}:18082
      - --mode=dev-container
      - --smp=1
      - --memory=2G
      - --node-id=0
    deploy:
      resources:
        reservations:
          cpus: '4.0'
          memory: 8G
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
{{/if}}

{{#if storage}}
  clickhouse-keeper:
    image: docker.io/clickhouse/clickhouse-keeper:${CLICKHOUSE_VERSION:-25.6}
    volumes:
      - clickhouse-keeper-data:/var/lib/clickhouse-keeper
    environment:
      - KEEPER_SERVER_ID=1
    ports:
      - "9181:9181"
    deploy:
      resources:
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - clickhouse-network
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | nc clickhouse-keeper 9181 | grep -q 'imok'"]
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 5s
    command: >
      sh -c "
             mkdir -p /etc/clickhouse-keeper &&
       cat > /etc/clickhouse-keeper/keeper_config.xml << 'EOF'
       <clickhouse>
         <logger>
           <level>information</level>
           <log>/var/log/clickhouse-keeper/clickhouse-keeper.log</log>
           <errorlog>/var/log/clickhouse-keeper/clickhouse-keeper.err.log</errorlog>
           <size>1000M</size>
           <count>10</count>
         </logger>
         <listen_host>0.0.0.0</listen_host>
         <max_connections>4096</max_connections>
         <keeper_server>
           <tcp_port>9181</tcp_port>
           <server_id>1</server_id>
           <log_storage_path>/var/lib/clickhouse-keeper/coordination/log</log_storage_path>
           <snapshot_storage_path>/var/lib/clickhouse-keeper/coordination/snapshots</snapshot_storage_path>
           <coordination_settings>
             <operation_timeout_ms>10000</operation_timeout_ms>
             <min_session_timeout_ms>10000</min_session_timeout_ms>
             <session_timeout_ms>30000</session_timeout_ms>
             <raft_logs_level>information</raft_logs_level>
           </coordination_settings>
           <hostname_checks_enabled>false</hostname_checks_enabled>
           <raft_configuration>
             <server>
               <id>1</id>
               <hostname>clickhouse-keeper</hostname>
               <port>9234</port>
             </server>
           </raft_configuration>
           <four_letter_word_white_list>*</four_letter_word_white_list>
         </keeper_server>
       </clickhouse>
      EOF
      exec /entrypoint.sh
      "

  clickhousedb:
    image: docker.io/clickhouse/clickhouse-server:${CLICKHOUSE_VERSION:-25.6}
    depends_on:
      clickhouse-keeper:
        condition: service_healthy
    volumes:
{{#if clickhouse_host_data_path}}
      - "{{clickhouse_host_data_path}}:/var/lib/clickhouse/"
{{else}}
      - clickhouse-0-data:/var/lib/clickhouse/
{{/if}}
      - clickhouse-0-logs:/var/log/clickhouse-server/
      - clickhouse-0-users:/etc/clickhouse-server/users.d
    environment:
      - CLICKHOUSE_DB=${DB_NAME:-local}
      - CLICKHOUSE_USER=${CLICKHOUSE_USER:-panda}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD:-pandapass}
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    networks:
      - clickhouse-network
    ports:
      - "${CLICKHOUSE_HOST_PORT:-18123}:8123"
      - "9000:9000"
    deploy:
      resources:
        reservations:
          cpus: '4.0'
          memory: 16G
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client -q 'select version()'"]
      interval: 5s
      retries: 2
      start_period: 20s
      timeout: 20s
    ulimits:
      nofile:
        soft: 20000
        hard: 40000
    command: >
      sh -c "
      mkdir -p /etc/clickhouse-server/config.d &&
      cat > /etc/clickhouse-server/config.d/keeper.xml << 'EOF'
      <clickhouse>
        <zookeeper>
          <node>
            <host>clickhouse-keeper</host>
            <port>9181</port>
          </node>
        </zookeeper>
        <distributed_ddl>
          <path>/clickhouse/task_queue/ddl</path>
        </distributed_ddl>
      </clickhouse>
      EOF
      exec /entrypoint.sh
      "
{{/if}}

{{#if scripts_feature}}
  postgresql:
    environment:
      POSTGRES_PASSWORD: ${TEMPORAL_DB_PASSWORD:-temporal}
      POSTGRES_USER: ${TEMPORAL_DB_USER:-temporal}
    image: postgres:${POSTGRESQL_VERSION:-13}
    networks:
      temporal-network:
        aliases:
          - postgresql
    ports:
      - ${TEMPORAL_DB_PORT:-5432}:5432
    volumes:
      - postgresql-data:/var/lib/postgresql/data

  temporal:
    depends_on:
      - postgresql
    environment:
      - DB=postgres12
      - DB_PORT=${TEMPORAL_DB_PORT:-5432}
      - POSTGRES_USER=${TEMPORAL_DB_USER:-temporal}
      - POSTGRES_PWD=${TEMPORAL_DB_PASSWORD:-temporal}
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=/etc/temporal/config/dynamicconfig/development-sql.yaml
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    networks:
      - temporal-network
    ports:
      - ${TEMPORAL_PORT:-7233}:7233
    configs:
      - source: temporal-config
        target: /etc/temporal/config/dynamicconfig/development-sql.yaml
        mode: 0444
    volumes:
      - temporal-data:/var/temporal/data
    deploy:
      resources:
        reservations:
          cpus: '2.0'
          memory: 4G
    healthcheck:
      test: ["CMD-SHELL", "tctl --address temporal:${TEMPORAL_PORT:-7233} workflow list"]
      interval: 1s
      retries: 30
      timeout: 5s

  temporal-admin-tools:
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:${TEMPORAL_PORT:-7233}
      - TEMPORAL_CLI_ADDRESS=temporal:${TEMPORAL_PORT:-7233}
    image: temporalio/admin-tools:${TEMPORAL_ADMINTOOLS_VERSION}
    networks:
      - temporal-network
    stdin_open: true
    tty: true

  temporal-ui:
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:${TEMPORAL_PORT:-7233}
      - TEMPORAL_CORS_ORIGINS=${TEMPORAL_UI_CORS_ORIGINS:-http://localhost:3000}
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    networks:
      - temporal-network
    ports:
      - ${TEMPORAL_UI_PORT:-8080}:8080

networks:
  temporal-network: null
  clickhouse-network: null
{{/if}}