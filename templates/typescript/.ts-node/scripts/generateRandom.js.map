{"version":3,"file":"generateRandom.js","sourceRoot":"","sources":["../../app/scripts/generateRandom.ts"],"names":[],"mappings":"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","sourcesContent":["import ____moose____typia from \"typia\";\nimport { Task, Workflow, OlapTable, Key } from \"@514labs/moose-lib\";\nimport { Foo } from \"../ingest/models\";\nimport { faker } from \"@faker-js/faker\";\n// Data model for OLAP Table\ninterface FooWorkflow {\n    id: Key<string>;\n    success: boolean;\n    message: string;\n}\n// Create OLAP Table\nconst workflowTable = new OlapTable<FooWorkflow>(\"FooWorkflow\", {}, ____moose____typia.json.schemas<[\n    FooWorkflow\n]>(), JSON.parse(\"[{\\\"name\\\":\\\"id\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":true,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"success\\\",\\\"data_type\\\":\\\"Boolean\\\",\\\"primary_key\\\":false,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"message\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":false,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]}]\") as any, {\n    validate: (data: unknown) => {\n        const result = ____moose____typia.createValidate<FooWorkflow>()(data);\n        return {\n            success: result.success,\n            data: result.success ? result.data : undefined,\n            errors: result.success ? undefined : result.errors\n        };\n    },\n    assert: ____moose____typia.createAssert<FooWorkflow>(),\n    is: ____moose____typia.createIs<FooWorkflow>()\n});\nexport const ingest = new Task<null, void>(\"ingest\", {\n    run: async () => {\n        for (let i = 0; i < 1000; i++) {\n            const foo: Foo = {\n                primaryKey: faker.string.uuid(),\n                timestamp: faker.date.recent({ days: 365 }).getTime(),\n                optionalText: Math.random() < 0.5 ? faker.lorem.text() : undefined,\n            };\n            try {\n                const response = await fetch(\"http://localhost:4000/ingest/Foo\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify(foo),\n                });\n                if (!response.ok) {\n                    console.log(`Failed to ingest record ${i}: ${response.status} ${response.statusText}`);\n                    // Insert ingestion result into OLAP table\n                    workflowTable.insert([\n                        { id: \"1\", success: false, message: response.statusText },\n                    ]);\n                }\n            }\n            catch (error) {\n                console.log(`Error ingesting record ${i}: ${error}`);\n                workflowTable.insert([\n                    { id: \"1\", success: false, message: error.message },\n                ]);\n            }\n            // Add a small delay to avoid overwhelming the server\n            if (i % 100 === 0) {\n                console.log(`Ingested ${i} records...`);\n                workflowTable.insert([\n                    { id: \"1\", success: true, message: `Ingested ${i} records` },\n                ]);\n                await new Promise((resolve) => setTimeout(resolve, 100));\n            }\n        }\n    },\n    retries: 3,\n    timeout: \"30s\",\n});\nexport const workflow = new Workflow(\"workflow\", {\n    startingTask: ingest,\n    retries: 3,\n    timeout: \"30s\",\n    schedule: \"@every 5s\",\n});\n"]}