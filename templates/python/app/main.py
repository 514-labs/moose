# This file was auto-generated by the framework. You can add data models or change the existing ones
from app.ingest import models, transforms
from moose_lib import QueryClient
from moose_lib.config.runtime import config_registry
from pydantic import BaseModel, Field
from typing import Optional, List
from app.views.bar_aggregated import barAggregatedMV

from fastapi import FastAPI, Depends

app = FastAPI()

query_client: Optional[QueryClient] = None


# Query params are defined as Pydantic models and are validated automatically
class QueryParams(BaseModel):
    order_by: Optional[str] = Field(
        default="total_rows",
        pattern=r"^(total_rows|rows_with_text|max_text_length|total_text_length)$",
        description="Must be one of: total_rows, rows_with_text, max_text_length, total_text_length"
    )
    limit: Optional[int] = Field(
        default=5,
        gt=0,
        le=100,
        description="Must be between 1 and 100"
    )
    start_day: Optional[int] = Field(
        default=1,
        gt=0,
        le=31,
        description="Must be between 1 and 31"
    )
    end_day: Optional[int] = Field(
        default=31,
        gt=0,
        le=31,
        description="Must be between 1 and 31"
    )


class QueryResult(BaseModel):
    day_of_month: int
    total_rows: Optional[int] = None
    rows_with_text: Optional[int] = None
    max_text_length: Optional[int] = None
    total_text_length: Optional[int] = None


@app.get("/bar", response_model=List[QueryResult])
def get_bar_data(params: QueryParams = Depends()):
    """
    API endpoint moved from ConsumptionApi implementation
    """
    global query_client
    if query_client is None:
        query_client = QueryClient(config_registry.get_clickhouse_config())

    start_day = params.start_day
    end_day = params.end_day
    limit = params.limit
    order_by = params.order_by

    query = f"""
    SELECT
        day_of_month,
        {order_by}
    FROM {barAggregatedMV.target_table.name}
    WHERE day_of_month >= {start_day}
    AND day_of_month <= {end_day}
    ORDER BY {order_by} DESC
    LIMIT {limit}
    """

    return [
        QueryResult(**row) for row in
        query_client.execute(
            query,
            {
                "order_by": params.order_by,
                "start_day": params.start_day,
                "end_day": params.end_day,
                "limit": params.limit
            }
        )
    ]
