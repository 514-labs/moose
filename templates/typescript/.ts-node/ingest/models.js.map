{"version":3,"file":"models.js","sourceRoot":"","sources":["../../app/ingest/models.ts"],"names":[],"mappings":"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","sourcesContent":["import ____moose____typia from \"typia\";\nimport { IngestPipeline, Key, OlapTable, DeadLetterModel, } from \"@514labs/moose-lib\";\n/**\n * Data Pipeline: Raw Record (Foo) → Processed Record (Bar)\n * Raw (Foo) → HTTP → Raw Stream → Transform → Derived (Bar) → Processed Stream → DB Table\n */\n/** =======Data Models========= */\n/** Raw data ingested via API */\nexport interface Foo {\n    primaryKey: Key<string>; // Unique ID\n    timestamp: number; // Unix timestamp\n    optionalText?: string; // Text to analyze\n}\n/** Analyzed text metrics derived from Foo */\nexport interface Bar {\n    primaryKey: Key<string>; // From Foo.primaryKey\n    utcTimestamp: Date; // From Foo.timestamp\n    hasText: boolean; // From Foo.optionalText?\n    textLength: number; // From Foo.optionalText.length\n}\n/** =======Pipeline Configuration========= */\nexport const deadLetterTable = new OlapTable<DeadLetterModel>(\"FooDeadLetter\", {\n    orderByFields: [\"failedAt\"],\n}, ____moose____typia.json.schemas<[\n    DeadLetterModel\n]>(), JSON.parse(\"[{\\\"name\\\":\\\"originalRecord\\\",\\\"data_type\\\":\\\"Json\\\",\\\"primary_key\\\":false,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"errorMessage\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":false,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"errorType\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":false,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"failedAt\\\",\\\"data_type\\\":\\\"DateTime\\\",\\\"primary_key\\\":false,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"source\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":false,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]}]\") as any, {\n    validate: (data: unknown) => {\n        const result = ____moose____typia.createValidate<DeadLetterModel>()(data);\n        return {\n            success: result.success,\n            data: result.success ? result.data : undefined,\n            errors: result.success ? undefined : result.errors\n        };\n    },\n    assert: ____moose____typia.createAssert<DeadLetterModel>(),\n    is: ____moose____typia.createIs<DeadLetterModel>()\n});\n/** Raw data ingestion */\nexport const FooPipeline = new IngestPipeline<Foo>(\"Foo\", {\n    table: false, // No table; only stream raw records\n    stream: true, // Buffer ingested records\n    ingest: true, // POST /ingest/Foo\n    deadLetterQueue: {\n        destination: deadLetterTable,\n    },\n}, ____moose____typia.json.schemas<[\n    Foo\n]>(), JSON.parse(\"[{\\\"name\\\":\\\"primaryKey\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":true,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"timestamp\\\",\\\"data_type\\\":\\\"Float\\\",\\\"primary_key\\\":false,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"optionalText\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]}]\") as any, {\n    validate: (data: unknown) => {\n        const result = ____moose____typia.createValidate<Foo>()(data);\n        return {\n            success: result.success,\n            data: result.success ? result.data : undefined,\n            errors: result.success ? undefined : result.errors\n        };\n    },\n    assert: ____moose____typia.createAssert<Foo>(),\n    is: ____moose____typia.createIs<Foo>()\n});\n/** Buffering and storing processed records (@see transforms.ts for transformation logic) */\nexport const BarPipeline = new IngestPipeline<Bar>(\"Bar\", {\n    table: true, // Persist in ClickHouse table \"Bar\"\n    stream: true, // Buffer processed records\n    ingest: false, // No API; only derive from processed Foo records\n}, ____moose____typia.json.schemas<[\n    Bar\n]>(), JSON.parse(\"[{\\\"name\\\":\\\"primaryKey\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":true,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"utcTimestamp\\\",\\\"data_type\\\":\\\"DateTime\\\",\\\"primary_key\\\":false,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"hasText\\\",\\\"data_type\\\":\\\"Boolean\\\",\\\"primary_key\\\":false,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"textLength\\\",\\\"data_type\\\":\\\"Float\\\",\\\"primary_key\\\":false,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]}]\") as any, {\n    validate: (data: unknown) => {\n        const result = ____moose____typia.createValidate<Bar>()(data);\n        return {\n            success: result.success,\n            data: result.success ? result.data : undefined,\n            errors: result.success ? undefined : result.errors\n        };\n    },\n    assert: ____moose____typia.createAssert<Bar>(),\n    is: ____moose____typia.createIs<Bar>()\n});\n"]}