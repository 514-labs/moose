{"version":3,"file":"2.ImportFiberPanelData.js","sourceRoot":"","sources":["../../../app/scripts/NetworkDataImport/2.ImportFiberPanelData.ts"],"names":[],"mappings":"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","sourcesContent":["import { TaskFunction, TaskDefinition } from \"@514labs/moose-lib\";\nimport * as XLSX from 'xlsx';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { v4 as uuidv4 } from 'uuid';\nimport axios from 'axios';\nimport { FiberPanel } from '../../datamodels/FiberPanel';\nimport { FiberPanelConnection } from '../../datamodels/FiberPanelConnection';\n\n/**\n * Input interface for the ImportFiberPanelData task\n */\ninterface ImportFiberPanelDataInput {\n  filePath?: string;  // Path to the Excel file containing fiber panel data\n}\n\n/**\n * Interface for connection ingest result\n */\ninterface ConnectionIngestResult {\n  batch: number;\n  success: boolean;\n  records: number;\n  result?: any;\n  error?: string;\n}\n\n/**\n * Task to import fiber panel data from Excel file into the FiberPanel and FiberPanelConnection data models\n * \n * @param input - The input parameters for the task\n * @returns Object containing task name and imported data\n */\nconst importFiberPanelData: TaskFunction = async (input: ImportFiberPanelDataInput) => {\n  console.log('ImportFiberPanelData: Starting import task');\n  \n  try {\n    // Set default values if not provided\n    const filePath = input.filePath || './data/incur_site_osp_fiber_panel_report_02-21-2025_2119PM (1).xlsx';\n    \n    console.log(`Starting import of fiber panel data from ${filePath}`);\n    \n    // Check if file exists\n    if (!fs.existsSync(filePath)) {\n      throw new Error(`File not found: ${filePath}`);\n    }\n    \n    // Read the Excel file\n    const workbook = XLSX.readFile(filePath);\n    \n    console.log(`Available sheets in the workbook: ${workbook.SheetNames.join(', ')}`);\n    \n    // Process the Site Summary sheet to extract fiber panel information\n    if (!workbook.SheetNames.includes('Site Summary (OSP)')) {\n      throw new Error('Site Summary (OSP) sheet not found in the workbook');\n    }\n    \n    // Get the Site Summary worksheet\n    const summarySheet = workbook.Sheets['Site Summary (OSP)'];\n    \n    // Convert the worksheet to JSON with headers\n    const summaryData = XLSX.utils.sheet_to_json(summarySheet, { header: 1 });\n    \n    if (summaryData.length <= 1) {\n      console.warn('No data found in the Site Summary sheet or only headers present');\n      return {\n        task: \"ImportFiberPanelData\",\n        data: {\n          success: false,\n          message: \"No data found in the Site Summary sheet\",\n          panels: [],\n          connections: []\n        }\n      };\n    }\n    \n    // Extract site location from the first row\n    const siteLocationRow = (summaryData[0] && summaryData[0][0]) ? String(summaryData[0][0]) : '';\n    // Parse location parts (format is typically Region/Market/Location/CLLI/Main)\n    const siteLocation = siteLocationRow.split('/').slice(0, -1).join('/');\n    \n    console.log(`Found site location: ${siteLocation}`);\n    \n    // Locate the headers row in the summary sheet (usually index 3, which is the 4th row)\n    const headerRowIndex = summaryData.findIndex(row => \n      Array.isArray(row) && \n      row.length >= 2 && \n      row[0] === 'Rack Location' && \n      row[1] === 'Name'\n    );\n    \n    if (headerRowIndex === -1) {\n      throw new Error('Could not find header row in Site Summary sheet');\n    }\n    \n    // Process panel summary data\n    const fiberPanels: FiberPanel[] = [];\n    const errors: string[] = [];\n    \n    // Start from the row after the headers\n    for (let i = headerRowIndex + 1; i < summaryData.length; i++) {\n      const row = summaryData[i] as any[];\n      \n      // Skip empty rows or rows without enough data\n      if (!row || row.length < 4) continue;\n      \n      // Extract panel data\n      const rackLocation = String(row[0] || '');\n      const panelName = String(row[1] || '');\n      const connectedPorts = Number(row[2] || 0);\n      const totalPorts = Number(row[3] || 0);\n      \n      // Skip if missing required data\n      if (!rackLocation || !panelName) {\n        errors.push(`Row ${i + 1}: Missing required fields (rackLocation or panelName)`);\n        continue;\n      }\n      \n      // Create fiber panel record\n      const panel: FiberPanel = {\n        id: uuidv4(),\n        siteLocation,\n        rackLocation,\n        panelName,\n        connectedPorts,\n        totalPorts\n      };\n      \n      fiberPanels.push(panel);\n      \n      console.log(`Processed panel: ${panelName} at ${rackLocation} (${connectedPorts}/${totalPorts} ports connected)`);\n    }\n    \n    console.log(`Extracted ${fiberPanels.length} fiber panels`);\n    \n    // Now process each panel sheet to extract connection details\n    const fiberConnections: FiberPanelConnection[] = [];\n    \n    for (const panel of fiberPanels) {\n      // Look for a sheet named after the rack location\n      if (!workbook.SheetNames.includes(panel.rackLocation)) {\n        console.warn(`No sheet found for rack location ${panel.rackLocation}`);\n        continue;\n      }\n      \n      console.log(`Processing connections for panel ${panel.panelName} at ${panel.rackLocation}`);\n      \n      // Get the worksheet\n      const panelSheet = workbook.Sheets[panel.rackLocation];\n      \n      // Convert the worksheet to JSON with headers\n      const panelData = XLSX.utils.sheet_to_json(panelSheet, { header: 1 });\n      \n      if (panelData.length <= 1) {\n        console.warn(`No data found in the ${panel.rackLocation} sheet`);\n        continue;\n      }\n      \n      // Process each row\n      for (let rowIndex = 2; rowIndex < panelData.length; rowIndex++) {\n        const row = panelData[rowIndex] as any[];\n        \n        // Skip empty rows\n        if (!row || row.length === 0) continue;\n        \n        // Each column in the row represents a port\n        for (let colIndex = 0; colIndex < row.length; colIndex++) {\n          const portInfo = String(row[colIndex] || '');\n          \n          // Parse port data (format is typically \"1: Yes (AM123 Forward)\" or \"2: No\")\n          const portMatch = portInfo.match(/^(\\d+):\\s+(Yes|No)(?:\\s+\\((.*)\\))?$/);\n          \n          if (!portMatch) continue;\n          \n          const portNumber = parseInt(portMatch[1]);\n          const isConnected = portMatch[2] === 'Yes';\n          const circuitId = portMatch[3] || '';\n          \n          // Parse connection type from circuit ID\n          let connectionType = '';\n          if (circuitId) {\n            if (circuitId.includes('Forward')) {\n              connectionType = 'Forward';\n            } else if (circuitId.includes('Return')) {\n              connectionType = 'Return';\n            } else if (circuitId.includes('A/B')) {\n              connectionType = 'A/B';\n            } else if (circuitId.includes('A/B/C/D')) {\n              connectionType = 'A/B/C/D';\n            } else if (circuitId.includes('BC Circuit')) {\n              connectionType = 'BC Circuit';\n            } else if (circuitId.includes('Unknown')) {\n              connectionType = 'Unknown';\n            }\n          }\n          \n          // Only create records for connected ports\n          if (isConnected) {\n            const connection: FiberPanelConnection = {\n              id: uuidv4(),\n              siteLocation: panel.siteLocation,\n              rackLocation: panel.rackLocation,\n              panelName: panel.panelName,\n              portNumber,\n              isConnected,\n              circuitId,\n              connectionType\n            };\n            \n            fiberConnections.push(connection);\n          }\n        }\n      }\n    }\n    \n    console.log(`Extracted ${fiberConnections.length} fiber panel connections`);\n    \n    // Send fiber panel data to the ingest API\n    console.log(`Sending ${fiberPanels.length} fiber panels to ingest API`);\n    \n    const panelIngestResult = await sendToIngestAPI('FiberPanel', fiberPanels);\n    \n    // Send fiber panel connection data to the ingest API\n    console.log(`Sending ${fiberConnections.length} fiber panel connections to ingest API`);\n    \n    const connectionBatchSize = 100;\n    const connectionBatches: FiberPanelConnection[][] = [];\n    \n    for (let i = 0; i < fiberConnections.length; i += connectionBatchSize) {\n      connectionBatches.push(fiberConnections.slice(i, i + connectionBatchSize));\n    }\n    \n    const connectionIngestResults: ConnectionIngestResult[] = [];\n    \n    for (let i = 0; i < connectionBatches.length; i++) {\n      console.log(`Sending connection batch ${i + 1} of ${connectionBatches.length} (${connectionBatches[i].length} records)`);\n      \n      try {\n        const result = await sendToIngestAPI('FiberPanelConnection', connectionBatches[i]);\n        connectionIngestResults.push({\n          batch: i + 1,\n          success: true,\n          records: connectionBatches[i].length,\n          result\n        });\n      } catch (error) {\n        console.error(`Failed to send connection batch ${i + 1}: ${error instanceof Error ? error.message : String(error)}`);\n        connectionIngestResults.push({\n          batch: i + 1,\n          success: false,\n          records: connectionBatches[i].length,\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }\n    \n    // Return the processed data summary\n    return {\n      task: \"ImportFiberPanelData\",\n      data: {\n        success: true,\n        message: `Imported ${fiberPanels.length} fiber panels and ${fiberConnections.length} connections with ${errors.length} errors`,\n        panels: {\n          count: fiberPanels.length,\n          ingestResult: panelIngestResult\n        },\n        connections: {\n          count: fiberConnections.length,\n          batches: connectionBatches.length,\n          ingestResults: connectionIngestResults\n        },\n        errors: errors.slice(0, 10),\n        timestamp: new Date().toISOString()\n      }\n    };\n  } catch (error) {\n    console.error(`Failed to import fiber panel data: ${error instanceof Error ? error.message : String(error)}`);\n    \n    // Return error information\n    return {\n      task: \"ImportFiberPanelData\",\n      data: {\n        success: false,\n        message: `Failed to import fiber panel data: ${error instanceof Error ? error.message : String(error)}`,\n        panels: { count: 0 },\n        connections: { count: 0 },\n        errors: [error instanceof Error ? error.message : String(error)],\n        timestamp: new Date().toISOString()\n      }\n    };\n  }\n};\n\n/**\n * Helper function to send data to the ingest API\n * \n * @param modelName - The name of the data model\n * @param data - The data to send\n * @returns The API response\n */\nasync function sendToIngestAPI<T>(modelName: string, data: T[]): Promise<any> {\n  try {\n    const response = await axios.post(`http://localhost:4000/ingest/${modelName}`, data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    return response.data;\n  } catch (error) {\n    console.error(`Error sending to ingest API for ${modelName}: ${error instanceof Error ? error.message : String(error)}`);\n    throw error;\n  }\n}\n\n/**\n * Creates and returns the task definition for the ImportFiberPanelData task\n */\nexport default function createTask(): TaskDefinition {\n  return {\n    task: importFiberPanelData,\n    config: {\n      retries: 3  // Retry up to 3 times if the task fails\n    }\n  };\n}"]}