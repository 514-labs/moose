{"version":3,"file":"getPanelUtilizationByRack.js","sourceRoot":"","sources":["../app/apis/getPanelUtilizationByRack.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAuC;AAQvC,8FAA8F;AAC9F,kBAAe,CAAC;IACZ,IAAM,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sGAA2D,CAAC;IAC7E,IAAM,WAAW,GAA4D,yEAAO,EAA4C,EAAE,EAAe;;YAA3D,sBAAkB,EAAlB,cAAc,mBAAG,CAAC,KAAA,EAAE,sBAAoB,EAApB,cAAc,mBAAG,GAAG,KAAA;YAAM,MAAM,YAAA,EAAE,GAAG,SAAA;;;;oBACrI,KAAK,GAAG,GAAG,6bAAC,iOAOyB,EAAc,yDACV,EAAc,4FAKhE,KAN8C,cAAc,EACV,cAAc,CAKhE,CAAC;oBAEe,qBAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAGpC,KAAK,CAAC,EAAA;;oBAHH,IAAI,GAAG,SAGJ;oBACT,sBAAO,IAAI,EAAC;;;SACf,CAAC;IACF,IAAM,WAAW,GAAG,UAAC,MAAM,EAAE,KAAK;QAC9B,IAAM,eAAe,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;QACjE,OAAO,WAAW,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;IAC/C,CAAC,CAAC;IACF,WAAW,CAAC,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;KAE7B,CAAC;IACL,WAAW,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;KAE9B,CAAC;IACL,OAAO,WAAW,CAAC;AACvB,CAAC,CAAC,EAAE,CAAC","sourcesContent":["import ____moose____typia from \"typia\";\nimport { createConsumptionApi, ConsumptionHelpers as CH } from \"@514labs/moose-lib\";\nimport { tags } from \"typia\";\n// Define expected parameters and their types\ninterface QueryParams {\n    minUtilization?: number & tags.Minimum<1> & tags.Maximum<100>;\n    maxUtilization?: number & tags.Minimum<1> & tags.Maximum<100>;\n}\n// createConsumptionApi uses compile time code generation to generate a parser for QueryParams\nexport default (() => {\n    const assertGuard = ____moose____typia.http.createAssertQuery<QueryParams>();\n    const handlerFunc: Parameters<typeof createConsumptionApi<QueryParams>>[0] = async ({ minUtilization = 0, maxUtilization = 100 }, { client, sql }) => {\n        const query = sql `\n      SELECT\n        rackLocation as rack_location,\n        AVG(100.0 * connectedPorts / totalPorts) AS avg_utilization\n      FROM\n        FiberPanel_0_0\n      WHERE\n        (100.0 * connectedPorts / totalPorts) >= ${minUtilization}\n        AND (100.0 * connectedPorts / totalPorts) <= ${maxUtilization}\n      GROUP BY\n        rackLocation\n      ORDER BY\n        avg_utilization DESC\n    `;\n        // Set return type to the expected query result shape\n        const data = await client.query.execute<{\n            rack_location: string;\n            avg_utilization: number;\n        }>(query);\n        return data;\n    };\n    const wrappedFunc = (params, utils) => {\n        const processedParams = assertGuard(new URLSearchParams(params));\n        return handlerFunc(processedParams, utils);\n    };\n    wrappedFunc[\"moose_input_schema\"] = ____moose____typia.json.schemas<[\n        QueryParams\n    ]>();\n    wrappedFunc[\"moose_output_schema\"] = ____moose____typia.json.schemas<[\n        { rack_location: string; avg_utilization: number; }[]\n    ]>();\n    return wrappedFunc;\n})();\n"]}