{"version":3,"file":"process_aircraft.js","sourceRoot":"","sources":["../../app/functions/process_aircraft.ts"],"names":[],"mappings":";;;;;;;;;;;;;AACA,+CAAyJ;AACzJ,SAAS,eAAe,CAAC,GAAW,EAAE,GAAW;IAC7C,mDAAmD;IACnD,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;IAC9D,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;IAC/D,kBAAkB;IAClB,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;QAC1B,MAAM,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5E,CAAC;IACD,OAAO,MAAM,CAAC;AAClB,CAAC;AACD;;;;GAIG;AACH,SAAS,aAAa,CAAC,QAAmB;;IAOtC,OAAO;QACH,QAAQ,EAAE,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAAQ,CAAC,UAAU,CAAC,mCAAI,KAAK;QACjD,SAAS,EAAE,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAAQ,CAAC,WAAW,CAAC,mCAAI,KAAK;QACnD,OAAO,EAAE,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAAQ,CAAC,SAAS,CAAC,mCAAI,KAAK;QAC/C,IAAI,EAAE,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAAQ,CAAC,MAAM,CAAC,mCAAI,KAAK;QACzC,IAAI,EAAE,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAAQ,CAAC,MAAM,CAAC,mCAAI,KAAK;KAC5C,CAAC;AACN,CAAC;AACD,IAAI,qCAA4B,CAAC,MAAM;IACnC,0CAAiC,CAAC,MAAM,EAAE,CAAC;IAC3C,qCAA4B,CAAC,MAAM,CAAC,YAAY,CAAC,0CAAiC,CAAC,MAAM,EAAE,UAAC,MAA4B;QACpH,IAAM,gBAAgB,GAAG,eAAe,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;QAC3D,IAAA,KAA+C,aAAa,CAAC,MAAM,CAAC,SAAS,CAAC,EAA5E,QAAQ,cAAA,EAAE,SAAS,eAAA,EAAE,OAAO,aAAA,EAAE,IAAI,UAAA,EAAE,IAAI,UAAoC,CAAC;QACrF,6BACO,MAAM,KACT,gBAAgB,kBAAA,EAChB,QAAQ,UAAA,EACR,SAAS,WAAA,EACT,OAAO,SAAA,EACP,IAAI,MAAA,EACJ,IAAI,MAAA,IACN;IACN,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import ____moose____typia from \"typia\";\nimport { AircraftTrackingData, AircraftTrackingDataPipeline, AircraftTrackingProcessed, AircraftTrackingProcessedPipeline, } from \"../datamodels/models\";\nfunction calculateZOrder(lat: number, lon: number): number {\n    // Normalize lat/lon to integers between 0 and 2^20\n    const latInt = Math.floor(((lat + 90.0) * (1 << 20)) / 180.0);\n    const lonInt = Math.floor(((lon + 180.0) * (1 << 20)) / 360.0);\n    // Interleave bits\n    let result = 0;\n    for (let i = 0; i < 20; i++) {\n        result |= ((latInt & (1 << i)) << i) | ((lonInt & (1 << i)) << (i + 1));\n    }\n    return result;\n}\n/**\n * Converts NavModes array to boolean flags\n * @param navModes Array of navigation modes\n * @returns Object containing boolean flags for each nav mode\n */\nfunction parseNavModes(navModes?: string[]): {\n    approach: boolean;\n    autopilot: boolean;\n    althold: boolean;\n    lnav: boolean;\n    tcas: boolean;\n} {\n    return {\n        approach: navModes?.includes(\"approach\") ?? false,\n        autopilot: navModes?.includes(\"autopilot\") ?? false,\n        althold: navModes?.includes(\"althold\") ?? false,\n        lnav: navModes?.includes(\"lnav\") ?? false,\n        tcas: navModes?.includes(\"tcas\") ?? false,\n    };\n}\nif (AircraftTrackingDataPipeline.stream &&\n    AircraftTrackingProcessedPipeline.stream) {\n    AircraftTrackingDataPipeline.stream.addTransform(AircraftTrackingProcessedPipeline.stream, (record: AircraftTrackingData): AircraftTrackingProcessed => {\n        const zorderCoordinate = calculateZOrder(record.lat, record.lon);\n        const { approach, autopilot, althold, lnav, tcas } = parseNavModes(record.nav_modes);\n        return {\n            ...record,\n            zorderCoordinate,\n            approach,\n            autopilot,\n            althold,\n            lnav,\n            tcas,\n        };\n    });\n}\n"]}