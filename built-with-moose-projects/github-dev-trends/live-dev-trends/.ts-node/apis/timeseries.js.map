{"version":3,"file":"timeseries.js","sourceRoot":"","sources":["../../app/apis/timeseries.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAuC;AASvC,kBAAe,CAAC;IACZ,IAAM,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sGAA2D,CAAC;IAC7E,IAAM,WAAW,GAA4D,yEAAO,EAA8D,EAAE,EAAgC;;YAA9F,gBAAmB,EAAnB,QAAQ,mBAAG,QAAQ,KAAA,EAAE,aAAU,EAAV,KAAK,mBAAG,EAAE,KAAA,EAAE,eAAY,EAAZ,OAAO,mBAAG,EAAE,KAAA;YAAmB,MAAM,YAAA,EAAE,GAAG,SAAA;;;;oBACvJ,WAAW,GAAG;wBAChB,MAAM,EAAE;4BACJ,MAAM,EAAE,GAAG,qGAAC,kCAAkC,IAAA;4BAC9C,OAAO,EAAE,GAAG,yFAAC,sBAAsB,IAAA;4BACnC,OAAO,EAAE,GAAG,oGAAC,iCAAiC,IAAA;4BAC9C,KAAK,EAAE,GAAG,uFAAC,QAAS,EAAK,UAAU,KAAf,KAAK,CAAU;yBACtC;wBACD,KAAK,EAAE;4BACH,MAAM,EAAE,GAAG,mGAAC,gCAAgC,IAAA;4BAC5C,OAAO,EAAE,GAAG,wFAAC,qBAAqB,IAAA;4BAClC,OAAO,EAAE,GAAG,mGAAC,gCAAgC,IAAA;4BAC7C,KAAK,EAAE,GAAG,sFAAC,QAAS,EAAK,SAAS,KAAd,KAAK,CAAS;yBACrC;wBACD,MAAM,EAAE;4BACJ,MAAM,EAAE,GAAG,qGAAC,kCAAkC,IAAA;4BAC9C,OAAO,EAAE,GAAG,2FAAC,sBAAsB,IAAA;4BACnC,OAAO,EAAE,GAAG,sGAAC,iCAAiC,IAAA;4BAC9C,KAAK,EAAE,GAAG,yFAAC,QAAS,EAAK,UAAU,KAAf,KAAK,CAAU;yBACtC;qBACJ,CAAC;oBACI,KAAK,GAAG,GAAG,keAAC,wCAER,EAA4B,8SAOhC,EAA6E,gBAC7E,EAA6B,gBAC7B,EAA6B,gBAC7B,EAA2B,aAChC,KAXS,WAAW,CAAC,QAAQ,CAAC,CAAC,MAAM,EAOhC,OAAO,CAAC,CAAC,CAAC,GAAG,qHAAC,8BAA+B,EAAO,gBAAgB,KAAvB,OAAO,EAAiB,CAAC,CAAC,GAAG,uEAAC,EAAE,IAAA,EAC7E,WAAW,CAAC,QAAQ,CAAC,CAAC,OAAO,EAC7B,WAAW,CAAC,QAAQ,CAAC,CAAC,OAAO,EAC7B,WAAW,CAAC,QAAQ,CAAC,CAAC,KAAK,CAChC,CAAC;oBACa,qBAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAQtC,KAAK,CAAC,EAAA;;oBARH,MAAM,GAAG,SAQN;oBACT,sBAAO,MAAM,EAAC;;;SACjB,CAAC;IACF,IAAM,WAAW,GAAG,UAAC,MAAM,EAAE,KAAK;QAC9B,IAAM,eAAe,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;QACjE,OAAO,WAAW,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;IAC/C,CAAC,CAAC;IACF,WAAW,CAAC,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAE7B,CAAC;IACL,WAAW,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAE9B,CAAC;IACL,OAAO,WAAW,CAAC;AACvB,CAAC,CAAC,EAAE,CAAC","sourcesContent":["import ____moose____typia from \"typia\";\nimport { WatchEventWithRepo } from './../datamodels/WatchEvent';\nimport { createConsumptionApi, ConsumptionUtil, ConsumptionHelpers as CH } from \"@514labs/moose-lib\";\nimport { tags } from \"typia\";\ninterface QueryParams {\n    interval?: \"hourly\" | \"daily\" | \"weekly\";\n    limit?: number & tags.Minimum<10> & tags.Type<\"int32\">;\n    exclude?: string & tags.Pattern<\"^([^,]+)(,[^,]+)*$\">; // comma separated list of tags to exclude\n}\nexport default (() => {\n    const assertGuard = ____moose____typia.http.createAssertQuery<QueryParams>();\n    const handlerFunc: Parameters<typeof createConsumptionApi<QueryParams>>[0] = async ({ interval = \"hourly\", limit = 10, exclude = \"\" }: QueryParams, { client, sql }: ConsumptionUtil) => {\n        const intervalMap = {\n            hourly: {\n                select: sql `toStartOfHour(createdAt) AS hour`,\n                groupBy: sql `GROUP BY hour, topic`,\n                orderBy: sql `ORDER BY hour, totalEvents DESC`,\n                limit: sql `LIMIT ${limit} BY hour`\n            },\n            daily: {\n                select: sql `toStartOfDay(createdAt) AS day`,\n                groupBy: sql `GROUP BY day, topic`,\n                orderBy: sql `ORDER BY day, totalEvents DESC`,\n                limit: sql `LIMIT ${limit} BY day`\n            },\n            weekly: {\n                select: sql `toStartOfWeek(createdAt) AS week`,\n                groupBy: sql `GROUP BY week, topic`,\n                orderBy: sql `ORDER BY week, totalEvents DESC`,\n                limit: sql `LIMIT ${limit} BY week`\n            }\n        };\n        const query = sql `\n            SELECT\n                ${intervalMap[interval].select},\n                arrayJoin(repoTopics) AS topic,\n                count() AS totalEvents,\n                uniqExact(repoId) AS uniqueReposCount,\n                uniqExact(actorId) AS uniqueUsersCount\n            FROM WatchEventWithRepo_0_0\n            WHERE length(repoTopics) > 0\n            ${exclude ? sql `AND arrayAll(x -> x NOT IN (${exclude}), repoTopics)` : sql ``}\n            ${intervalMap[interval].groupBy}\n            ${intervalMap[interval].orderBy}\n            ${intervalMap[interval].limit};\n        `;\n        const result = await client.query.execute<{\n            hour?: string;\n            day?: string;\n            week?: string;\n            topic: string;\n            total_events: number;\n            unique_repos_count: number;\n            unique_users_count: number;\n        }>(query);\n        return result;\n    };\n    const wrappedFunc = (params, utils) => {\n        const processedParams = assertGuard(new URLSearchParams(params));\n        return handlerFunc(processedParams, utils);\n    };\n    wrappedFunc[\"moose_input_schema\"] = ____moose____typia.json.schemas<[\n        QueryParams\n    ]>();\n    wrappedFunc[\"moose_output_schema\"] = ____moose____typia.json.schemas<[\n        { hour?: string | undefined; day?: string | undefined; week?: string | undefined; topic: string; total_events: number; unique_repos_count: number; unique_users_count: number; }[]\n    ]>();\n    return wrappedFunc;\n})();\n"]}