/* tslint:disable */
/* eslint-disable */
/**
 * ts API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { GhEvent, ResponseBody } from "../models/index";
import {
  GhEventFromJSON,
  GhEventToJSON,
  ResponseBodyFromJSON,
  ResponseBodyToJSON,
} from "../models/index";

export interface ConsumptionTopicTimeseriesGetRequest {
  interval?: string;
  limit?: number;
  exclude?: string;
}

export interface IngestGhEventPostRequest {
  ghEvent: GhEvent;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Egress endpoint for topicTimeseries
   */
  async consumptionTopicTimeseriesGetRaw(
    requestParameters: ConsumptionTopicTimeseriesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<ResponseBody>>> {
    const queryParameters: any = {};

    if (requestParameters["interval"] != null) {
      queryParameters["interval"] = requestParameters["interval"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["exclude"] != null) {
      queryParameters["exclude"] = requestParameters["exclude"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/consumption/topicTimeseries`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ResponseBodyFromJSON),
    );
  }

  /**
   * Egress endpoint for topicTimeseries
   */
  async consumptionTopicTimeseriesGet(
    requestParameters: ConsumptionTopicTimeseriesGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<ResponseBody>> {
    const response = await this.consumptionTopicTimeseriesGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Ingress endpoint for GhEvent
   */
  async ingestGhEventPostRaw(
    requestParameters: IngestGhEventPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["ghEvent"] == null) {
      throw new runtime.RequiredError(
        "ghEvent",
        'Required parameter "ghEvent" was null or undefined when calling ingestGhEventPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/ingest/GhEvent`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: GhEventToJSON(requestParameters["ghEvent"]),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Ingress endpoint for GhEvent
   */
  async ingestGhEventPost(
    requestParameters: IngestGhEventPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.ingestGhEventPostRaw(requestParameters, initOverrides);
  }
}
