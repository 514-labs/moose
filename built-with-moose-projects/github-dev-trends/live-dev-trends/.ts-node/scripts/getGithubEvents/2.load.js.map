{"version":3,"file":"2.load.js","sourceRoot":"","sources":["../../../app/scripts/getGithubEvents/2.load.ts"],"names":[],"mappings":"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","sourcesContent":["import { TaskFunction, TaskDefinition } from \"@514labs/moose-lib\";\nimport { FetchEventsOutput, createOctokit, RepoType, RepoRequestOptions, RepoResponseType } from \"../utils\";\nimport { WatchEvent, WatchEventWithRepo } from \"../../datamodels/WatchEvent\";\nimport { cliLog } from \"@514labs/moose-lib\";\n// The initial input data and data passed between tasks can be\n// defined in the task function parameter\nconst load: TaskFunction = async (input?: FetchEventsOutput) => {\n    // The body of your script goes here\n    console.log(\"Hello world from load\");\n\n    if (!input || input.noNewEvents) {\n        console.log(\"No new events to load\");\n        return {\n            task: \"load\",\n            data: {\n                eventsLoaded: 0\n            }\n        };\n    }\n\n    console.log(`Loading ${input.count} events from ${input.fetchedAt}`);\n\n    const octokit = createOctokit();\n    // Process the events here\n    // input.events contains the GitHub events data\n    for (const event of input.events) {\n        if (event.type === \"WatchEvent\") {\n            const mooseEvent = {\n                eventId: event.id,\n                actorLogin: event.actor.login,\n                actorId: event.actor.id,\n                actorUrl: event.actor.url,\n                actorAvatarUrl: event.actor.avatar_url,\n                repoName: event.repo.name,\n                repoUrl: event.repo.url,\n                repoId: event.repo.id,\n                createdAt: event.created_at ? new Date(event.created_at) : null\n            } as WatchEvent;\n\n            const repo = await octokit.rest.repos.get({\n                owner: event.repo.name.split(\"/\")[0],\n                repo: event.repo.name.split(\"/\")[1]\n            } as RepoRequestOptions)\n\n            const repoData = repo.data as RepoType;\n            \n            const mooseEventWithRepo = {\n                ...mooseEvent,\n                repoDescription: repoData.description,\n                repoTopics: repoData.topics,\n                repoLanguage: repoData.language,\n                repoStars: repoData.stargazers_count,   \n                repoForks: repoData.forks_count,\n                repoWatchers: repoData.watchers_count,\n                repoOpenIssues: repoData.open_issues_count,\n                repoCreatedAt: repoData.created_at ? new Date(repoData.created_at) : null,\n                repoOwnerLogin: repoData.owner.login,\n                repoOwnerId: repoData.owner.id,   \n                repoOwnerUrl: repoData.owner.url,\n                repoOwnerAvatarUrl: repoData.owner.avatar_url,\n                repoOwnerType: repoData.owner.type, \n                repoOrgId: repoData.organization?.id,\n                repoOrgUrl: repoData.organization?.url,\n                repoOrgLogin: repoData.organization?.login,\n                repoHomepage: repoData.homepage,\n            } as WatchEventWithRepo;\n\n            await fetch(\"http://localhost:4000/ingest/WatchEventWithRepo\", {\n                method: \"POST\",\n                body: JSON.stringify(mooseEventWithRepo)\n            });\n\n            cliLog({action: \"load\",  message: JSON.stringify(mooseEventWithRepo)});\n        }   \n    }\n\n    // The return value is the output of the script.\n    // The return value should be a dictionary with at least:\n    // - task: the task name (e.g., \"extract\", \"transform\")\n    // - data: the actual data being passed to the next task\n    return {\n        task: \"load\",\n        data: {\n            eventsLoaded: input.count,\n            loadedAt: new Date().toISOString()\n        }\n    };\n};\n\nexport default function createTask() {\n    return {\n        task: load,\n        config: {\n            retries: 3,\n        }\n    } as TaskDefinition;\n}\n"]}