{"version":3,"file":"bar.js","sourceRoot":"","sources":["../../app/apis/bar.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAuC;AACvC,gDAAgE;AAChE,wDAAyD;AAgB5C,QAAA,MAAM,GAAG,IAAI,0BAAc,CAA8B,KAAK,EAAE,UAAC,MAAM,EAAE,KAAK;IACvF,IAAM,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sGAA2D,CAAC;IAC7E,IAAM,YAAY,GAAG,IAAI,eAAe,CAAC,MAAa,CAAC,CAAC;IACxD,IAAM,eAAe,GAAG,WAAW,CAAC,YAAY,CAAC,CAAC;IAClD,OAAO,CAAC,yEAAO,EAA+D,EAAE,EAAe;;YAA9E,eAAqB,EAArB,OAAO,mBAAG,WAAW,KAAA,EAAE,aAAS,EAAT,KAAK,mBAAG,CAAC,KAAA,EAAE,gBAAY,EAAZ,QAAQ,mBAAG,CAAC,KAAA,EAAE,cAAW,EAAX,MAAM,mBAAG,EAAE,KAAA;YAAM,MAAM,YAAA,EAAE,GAAG,SAAA;;;wBAC3E,qBAAM,sBAAU,CAAC,GAAG,EAAE,EAAA;;oBAA9B,KAAK,GAAG,SAAsB;oBAC9B,QAAQ,GAAG,cAAO,OAAO,cAAI,KAAK,cAAI,QAAQ,cAAI,MAAM,CAAE,CAAC;oBAE9C,qBAAM,KAAK,CAAC,GAAG,CAAiB,QAAQ,CAAC,EAAA;;oBAAtD,UAAU,GAAG,SAAyC;oBAC5D,IAAI,UAAU,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;wBACnE,sBAAO,UAAU,EAAC;oBACtB,CAAC;oBACK,KAAK,GAAG,GAAG,mRAAC,+BAEd,EAA8C,eAC9C,EAA4C,iBACzC,EAA2B,4CAEhB,EAAQ,iCACJ,EAAM,qBACjB,EAA4C,uBAC/C,EAAK,UACd,KARK,+BAAe,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,EAC9C,+BAAe,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,EACzC,+BAAe,CAAC,WAAW,EAEhB,QAAQ,EACJ,MAAM,EACjB,+BAAe,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,EAC/C,KAAK,CACd,CAAC;oBACa,qBAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAe,KAAK,CAAC,EAAA;;oBAAtD,IAAI,GAAG,SAA+C;oBAC7B,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;oBAA1C,MAAM,GAAmB,SAAiB;oBAChD,qBAAM,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,EAAA;;oBAAvC,SAAuC,CAAC,CAAC,mBAAmB;oBAC5D,sBAAO,MAAM,EAAC;;;SACjB,CAAC,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;AAC/B,CAAC,EAAE,EAAE,OAAO,EAAE,GAAG,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAEb,IAAI,CAAC,KAAK,CAAC,sjBAAsjB,CAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAE1kB,CAAC","sourcesContent":["import ____moose____typia from \"typia\";\nimport { ConsumptionApi, MooseCache } from \"@514labs/moose-lib\";\nimport { BarAggregatedMV } from \"../views/barAggregated\";\nimport { tags } from \"typia\";\n// This file is where you can define your APIs to consume your data\ninterface QueryParams {\n    orderBy?: \"totalRows\" | \"rowsWithText\" | \"maxTextLength\" | \"totalTextLength\";\n    limit?: number;\n    startDay?: number & tags.Type<\"int32\">;\n    endDay?: number & tags.Type<\"int32\">;\n}\ninterface ResponseData {\n    dayOfMonth: number;\n    totalRows?: number;\n    rowsWithText?: number;\n    maxTextLength?: number;\n    totalTextLength?: number;\n}\nexport const BarApi = new ConsumptionApi<QueryParams, ResponseData[]>(\"bar\", (params, utils) => {\n    const assertGuard = ____moose____typia.http.createAssertQuery<QueryParams>();\n    const searchParams = new URLSearchParams(params as any);\n    const processedParams = assertGuard(searchParams);\n    return (async ({ orderBy = \"totalRows\", limit = 5, startDay = 1, endDay = 31 }, { client, sql }) => {\n        const cache = await MooseCache.get();\n        const cacheKey = `bar:${orderBy}:${limit}:${startDay}:${endDay}`;\n        // Try to get from cache first\n        const cachedData = await cache.get<ResponseData[]>(cacheKey);\n        if (cachedData && Array.isArray(cachedData) && cachedData.length > 0) {\n            return cachedData;\n        }\n        const query = sql `\n        SELECT \n          ${BarAggregatedMV.targetTable.columns.dayOfMonth},\n          ${BarAggregatedMV.targetTable.columns[orderBy]}\n        FROM ${BarAggregatedMV.targetTable}\n        WHERE \n          dayOfMonth >= ${startDay} \n          AND dayOfMonth <= ${endDay}\n        ORDER BY ${BarAggregatedMV.targetTable.columns[orderBy]} DESC\n        LIMIT ${limit}\n      `;\n        const data = await client.query.execute<ResponseData>(query);\n        const result: ResponseData[] = await data.json();\n        await cache.set(cacheKey, result, 3600); // Cache for 1 hour\n        return result;\n    })(processedParams, utils);\n}, { version: \"1\" }, ____moose____typia.json.schemas<[\n    QueryParams\n]>(), JSON.parse(\"[{\\\"name\\\":\\\"orderBy\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"limit\\\",\\\"data_type\\\":\\\"Float\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"startDay\\\",\\\"data_type\\\":\\\"Int32\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"endDay\\\",\\\"data_type\\\":\\\"Int32\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]}]\") as any, ____moose____typia.json.schemas<[\n    ResponseData[]\n]>());\n"]}