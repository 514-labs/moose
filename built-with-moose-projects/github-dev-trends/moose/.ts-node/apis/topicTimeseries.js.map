{"version":3,"file":"topicTimeseries.js","sourceRoot":"","sources":["../../app/apis/topicTimeseries.ts"],"names":[],"mappings":"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","sourcesContent":["import ____moose____typia from \"typia\";\nimport { WatchEventWithRepo } from \"../datamodels/WatchEvent\";\nimport { createConsumptionApi, ConsumptionUtil, ConsumptionHelpers as CH, cliLog } from \"@514labs/moose-lib\";\nimport { tags } from \"typia\";\ninterface QueryParams {\n    interval?: \"minute\" | \"hour\" | \"day\";\n    limit?: number & tags.Minimum<10> & tags.Type<\"int32\">;\n    exclude?: string & tags.Pattern<\"^([^,]+)(,[^,]+)*$\">; // comma separated list of tags to exclude\n}\nexport default (() => {\n    const assertGuard = ____moose____typia.http.createAssertQuery<QueryParams>();\n    const handlerFunc: Parameters<typeof createConsumptionApi<QueryParams>>[0] = async ({ interval = \"minute\", limit = 10, exclude = \"\" }: QueryParams, { client, sql }: ConsumptionUtil) => {\n        cliLog({\n            message: `interval: ${interval}, limit: ${limit}, exclude: ${exclude}`,\n            action: \"topicTimeseries\"\n        });\n        const intervalMap = {\n            hour: {\n                select: sql `toStartOfHour(createdAt) AS time`,\n                groupBy: sql `GROUP BY time, topic`,\n                orderBy: sql `ORDER BY time, totalEvents DESC`,\n                limit: sql `LIMIT ${limit} BY time`,\n            },\n            day: {\n                select: sql `toStartOfDay(createdAt) AS time`,\n                groupBy: sql `GROUP BY time, topic`,\n                orderBy: sql `ORDER BY time, totalEvents DESC`,\n                limit: sql `LIMIT ${limit} BY time`,\n            },\n            minute: {\n                select: sql `toStartOfMinute(createdAt) AS time`,\n                groupBy: sql `GROUP BY time, topic`,\n                orderBy: sql `ORDER BY time, totalEvents DESC`,\n                limit: sql `LIMIT ${limit} BY time`,\n            },\n        };\n        const query = sql `\n            SELECT\n                time,\n                arrayMap(\n                    (topic, events, repos, users) -> map(\n                        'topic', topic,\n                        'eventCount', toString(events),\n                        'uniqueRepos', toString(repos),\n                        'uniqueUsers', toString(users)\n                    ),\n                    groupArray(topic),\n                    groupArray(totalEvents),\n                    groupArray(uniqueReposCount),\n                    groupArray(uniqueUsersCount)\n                ) AS topicStats\n            FROM (\n                SELECT\n                    ${intervalMap[interval].select},\n                    arrayJoin(repoTopics) AS topic,\n                    count() AS totalEvents,\n                    uniqExact(repoId) AS uniqueReposCount,\n                    uniqExact(actorId) AS uniqueUsersCount\n                FROM WatchEventWithRepo_0_0\n                WHERE length(repoTopics) > 0\n                ${exclude ? sql `AND arrayAll(x -> x NOT IN (${exclude}), repoTopics)` : sql ``}\n                ${intervalMap[interval].groupBy}\n                ${intervalMap[interval].orderBy}\n                ${intervalMap[interval].limit}\n            )\n            GROUP BY time\n            ORDER BY time;\n        `;\n        const result = await client.query.execute<{\n            time: string;\n            topicStats: Array<{\n                topic: string;\n                eventCount: number;\n                uniqueRepos: number;\n                uniqueUsers: number;\n            }>;\n        }>(query);\n        // Transform to final format\n        return result;\n    };\n    const wrappedFunc = (params, utils) => {\n        const processedParams = assertGuard(new URLSearchParams(params));\n        return handlerFunc(processedParams, utils);\n    };\n    wrappedFunc[\"moose_input_schema\"] = ____moose____typia.json.schemas<[\n        QueryParams\n    ]>();\n    wrappedFunc[\"moose_output_schema\"] = ____moose____typia.json.schemas<[\n        { time: string; topicStats: { topic: string; eventCount: number; uniqueRepos: number; uniqueUsers: number; }[]; }[]\n    ]>();\n    return wrappedFunc;\n})();\n"]}