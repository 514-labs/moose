{"version":3,"file":"1.ImportTransportSchedule.js","sourceRoot":"","sources":["../../../app/scripts/NetworkDataImport/1.ImportTransportSchedule.ts"],"names":[],"mappings":"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","sourcesContent":["import { TaskFunction, TaskDefinition } from \"@514labs/moose-lib\";\nimport * as XLSX from 'xlsx';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { v4 as uuidv4 } from 'uuid';\nimport axios from 'axios';\nimport { TransportSchedule } from '../../datamodels/TransportSchedule';\n\n/**\n * Interface for the input parameters of the ImportTransportSchedule task\n */\ninterface ImportTransportScheduleInput {\n  filePath?: string;          // Path to the Excel file containing transport schedule data\n  sheetName?: string;         // Name of the sheet containing the data\n}\n\n/**\n * Task to import transport schedule data from Excel file into the TransportSchedule data model\n * \n * @param input - The input parameters for the task\n * @returns Object containing task name and imported data\n */\nconst importTransportSchedule: TaskFunction = async (input: ImportTransportScheduleInput) => {\n  console.log('ImportTransportSchedule: Starting import task');\n  \n  try {\n    // Set default values if not provided\n    const filePath = input.filePath || './data/Transport_Schedule(Transport) (1).xlsx';\n    const sheetName = input.sheetName || 'Sheet 1 - Transport_Schedule(Tr';\n    \n    console.log(`Starting import of transport schedule from ${filePath}, sheet: ${sheetName}`);\n    \n    // Check if file exists\n    if (!fs.existsSync(filePath)) {\n      throw new Error(`File not found: ${filePath}`);\n    }\n    \n    // Read the Excel file\n    const workbook = XLSX.readFile(filePath);\n    \n    // Check if the specified sheet exists\n    if (!workbook.SheetNames.includes(sheetName)) {\n      throw new Error(`Sheet '${sheetName}' not found in workbook. Available sheets: ${workbook.SheetNames.join(', ')}`);\n    }\n    \n    // Get the worksheet\n    const worksheet = workbook.Sheets[sheetName];\n    \n    // Convert the worksheet to JSON with headers\n    const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n    \n    if (rawData.length <= 1) {\n      console.warn('No data found in the Excel sheet or only headers present');\n      return {\n        task: \"ImportTransportSchedule\",\n        data: {\n          success: false,\n          message: \"No data found in the Excel sheet or only headers present\",\n          records: []\n        }\n      };\n    }\n    \n    // Extract headers from the first row\n    const headers = rawData[0] as string[];\n    \n    console.log(`Found ${rawData.length - 1} records in the Excel sheet`);\n    \n    // Process and validate the data\n    const transportScheduleData: TransportSchedule[] = [];\n    const errors: string[] = [];\n    \n    // Map Excel column indices to our data model fields\n    const fieldMapping: Record<string, string> = {\n      'Tranport Ring Name': 'transportRingName',\n      'Priority': 'priority',\n      'ISP Ready Date if Different from Field Ops Date': 'ispReadyDate',\n      'Field Ops Date': 'fieldOpsDate',\n      'inCUR Region - HUB A': 'hubARegion',\n      'inCUR Market - HUB A': 'hubAMarket',\n      'inCUR Location - HUB A': 'hubALocation',\n      'HUB A': 'hubAName',\n      'HUB A CLLI': 'hubACLLI',\n      'CITY ': 'hubACity',\n      'STATE': 'hubAState',\n      'inCUR Region- HUB B': 'hubBRegion',\n      'inCUR Market - HUB B': 'hubBMarket',\n      'inCUR Location - HUB B': 'hubBLocation',\n      'HUB B': 'hubBName',\n      'HUB B CLLI': 'hubBCLLI',\n      'CITY': 'hubBCity',\n      'STATE2': 'hubBState',\n      'HUB A-B DISTANCE (KM)': 'distanceKM',\n      'Hub A - Hub B': 'hubAToHubB',\n      'Hub A Cilli - Hub B Cilli': 'hubACLLIToHubBCLLI',\n      'Comments': 'comments',\n      'ISP Actual Date Complete': 'ispActualDateComplete'\n    };\n    \n    // Convert header indices to column mapping\n    const columnMap: Record<number, string> = {};\n    headers.forEach((header, index) => {\n      if (fieldMapping[header]) {\n        columnMap[index] = fieldMapping[header];\n      }\n    });\n    \n    // Process each data row\n    for (let i = 1; i < rawData.length; i++) {\n      try {\n        const row = rawData[i] as any[];\n        \n        // Skip empty rows\n        if (!row || row.length === 0) continue;\n        \n        // Create a transport schedule item\n        const item: Partial<TransportSchedule> = {\n          id: uuidv4(), // Generate a unique ID\n        };\n        \n        // Map data from Excel columns to our data model fields\n        Object.entries(columnMap).forEach(([columnIndex, fieldName]) => {\n          const value = row[parseInt(columnIndex)];\n          \n          // Skip undefined or null values\n          if (value === undefined || value === null) return;\n          \n          // Handle different field types\n          switch (fieldName) {\n            case 'ispReadyDate':\n            case 'fieldOpsDate':\n              // Handle Excel date values\n              if (typeof value === 'string') {\n                try {\n                  item[fieldName] = new Date(value);\n                } catch (e) {\n                  // Skip if we can't parse the date\n                  console.warn(`Could not parse date value: ${value}`);\n                }\n              } else if (typeof value === 'number') {\n                // Excel stores dates as days since 1/1/1900\n                const excelEpoch = new Date(1899, 11, 30);\n                const date = new Date(excelEpoch);\n                date.setDate(excelEpoch.getDate() + value);\n                item[fieldName] = date;\n              }\n              break;\n            case 'priority':\n            case 'distanceKM':\n              item[fieldName] = typeof value === 'number' ? value : parseFloat(value);\n              break;\n            default:\n              item[fieldName] = String(value);\n          }\n        });\n        \n        // Validate the transformed item - add minimal validation to ensure it has required fields\n        if (!item.transportRingName || !item.hubAName || !item.hubBName) {\n          errors.push(`Row ${i + 1}: Missing required fields (transportRingName, hubAName, or hubBName)`);\n          continue;\n        }\n        \n        transportScheduleData.push(item as TransportSchedule);\n      } catch (error) {\n        errors.push(`Error processing row ${i + 1}: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n    \n    // Log any errors\n    if (errors.length > 0) {\n      console.warn(`Encountered ${errors.length} errors during import:`);\n      errors.slice(0, 5).forEach(error => console.warn(error));\n      if (errors.length > 5) {\n        console.warn(`... and ${errors.length - 5} more errors`);\n      }\n    }\n    \n    console.log(`Successfully processed ${transportScheduleData.length} transport schedule records`);\n    \n    // Chunk the data into batches to avoid hitting request size limits\n    const batchSize = 100;\n    const batches: TransportSchedule[][] = [];\n    \n    for (let i = 0; i < transportScheduleData.length; i += batchSize) {\n      batches.push(transportScheduleData.slice(i, i + batchSize));\n    }\n    \n    console.log(`Sending data in ${batches.length} batches of up to ${batchSize} records each`);\n    \n    // Send each batch to the ingest API endpoint\n    const ingestResults: Array<{\n      batch: number;\n      success: boolean;\n      records: number;\n      response?: any;\n      error?: string;\n    }> = [];\n    \n    for (let i = 0; i < batches.length; i++) {\n      try {\n        console.log(`Sending batch ${i + 1} of ${batches.length} (${batches[i].length} records)`);\n        \n        // Send data to the ingest API endpoint - adjust URL as needed\n        const response = await axios.post('http://localhost:4000/ingest/TransportSchedule', batches[i], {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        ingestResults.push({\n          batch: i + 1,\n          success: true,\n          records: batches[i].length,\n          response: response.data\n        });\n        \n        console.log(`Successfully sent batch ${i + 1} to ingest API`);\n      } catch (error) {\n        console.error(`Failed to send batch ${i + 1} to ingest API: ${error instanceof Error ? error.message : String(error)}`);\n        \n        ingestResults.push({\n          batch: i + 1,\n          success: false,\n          records: batches[i].length,\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }\n    \n    // Return the processed data summary\n    return {\n      task: \"ImportTransportSchedule\",\n      data: {\n        success: true,\n        message: `Imported ${transportScheduleData.length} transport schedule records with ${errors.length} errors`,\n        totalRecords: transportScheduleData.length,\n        errorCount: errors.length,\n        sampleErrors: errors.slice(0, 5),\n        batches: batches.length,\n        ingestResults,\n        timestamp: new Date().toISOString()\n      }\n    };\n  } catch (error) {\n    console.error(`Failed to import transport schedule: ${error instanceof Error ? error.message : String(error)}`);\n    \n    // Return error information\n    return {\n      task: \"ImportTransportSchedule\",\n      data: {\n        success: false,\n        message: `Failed to import transport schedule: ${error instanceof Error ? error.message : String(error)}`,\n        records: 0,\n        errors: [error instanceof Error ? error.message : String(error)],\n        timestamp: new Date().toISOString()\n      }\n    };\n  }\n};\n\n/**\n * Creates and returns the task definition for the ImportTransportSchedule task\n */\nexport default function createTask(): TaskDefinition {\n  return {\n    task: importTransportSchedule,\n    config: {\n      retries: 3,  // Retry up to 3 times if the task fails\n    }\n  };\n}"]}