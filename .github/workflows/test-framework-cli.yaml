name: Test Framework CLI

on:
  workflow_dispatch:
  push:
    branches:
      - "**"
      - "!main"

defaults:
  run:
    working-directory: ./apps/framework-cli

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      framework-cli: ${{ steps.check-changes.outputs.framework-cli }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for relevant changes
        id: check-changes
        shell: bash
        run: |
          # Define patterns to check - one per line for readability
          PATTERNS=(
            "^\.github/workflows/test-framework-cli\.yaml"
            "^apps/framework-cli-e2e/"
            "^apps/framework-cli/"
            "^templates/python/"
            "^templates/typescript/"
            "^packages/"
          )

          # Join patterns with | for grep
          GREP_PATTERN=$(IFS="|"; echo "${PATTERNS[*]}")

          # Get changed files
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changes.txt

          # Check if any relevant files were changed
          if grep -q -E "${GREP_PATTERN}" changes.txt; then
            echo "framework-cli=true" >> $GITHUB_OUTPUT
          else
            echo "framework-cli=false" >> $GITHUB_OUTPUT
          fi

  check:
    needs: changes
    if: ${{ needs.changes.outputs.framework-cli == 'true' }}
    name: Check
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    runs-on: ubuntu-latest
    steps:
      - name: Install Protoc (Needed for Temporal)
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "23.x"

      - name: Checkout sources
        uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path ./apps/framework-cli/Cargo.toml

      - name: Check for unused dependencies
        uses: bnjbvr/cargo-machete@main

      - name: Run cargo Build in release mode
        run: cargo build --release --locked

  test-macos:
    needs: changes
    if: ${{ needs.changes.outputs.framework-cli == 'true' }}
    name: Test Suite (MacOS)
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
      RUST_BACKTRACE: full
    runs-on: macos-latest
    strategy:
      fail-fast: false
    steps:
      - name: Install Protoc (Needed for Temporal)
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "23.x"

      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Run pnpm install
        run: pnpm install --filter=@repo/scripts

      - name: Run Tests
        run: cargo test
        env:
          MOOSE_TELEMETRY_ENABLED: false

      - name: Inspect Logs
        if: always()
        run: |
          cat ~/.moose/*-cli.log

  test-ubuntu:
    needs: changes
    if: ${{ needs.changes.outputs.framework-cli == 'true' }}
    name: Test Suite (Ubuntu)
    runs-on: ubuntu-4
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
      RUST_BACKTRACE: full
    strategy:
      fail-fast: false
    steps:
      - name: Install Protoc (Needed for Temporal)
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "23.x"

      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Run pnpm install
        run: pnpm install --filter=@repo/scripts

      - name: Run Tests
        run: cargo test
        env:
          MOOSE_TELEMETRY_ENABLED: false

      - name: Run e2e Tests
        run: pnpm install --frozen-lockfile && pnpm --filter=framework-cli-e2e run test
        env:
          MOOSE_TELEMETRY_ENABLED: false

      - name: Inspect Logs
        if: always()
        run: |
          cat ~/.moose/*-cli.log

  lints:
    needs: changes
    if: ${{ needs.changes.outputs.framework-cli == 'true' }}
    name: Lints
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    runs-on: ubuntu-latest
    steps:
      - name: Install Protoc (Needed for Temporal)
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "23.x"

      - name: Checkout sources
        uses: actions/checkout@v2

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      # to trigger code gen
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path ./apps/framework-cli/Cargo.toml --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path ./apps/framework-cli/Cargo.toml -- -D warnings

  notify-slack-on-failure:
    needs: [changes, check, test-macos, test-ubuntu, lints]
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Slack on failure
        uses: 514-labs/slack-notification-action@1.0.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          slack-webhook-url: ${{ secrets.SLACK_GITHUB_ACTIONS_WEBHOOK_URL }}
