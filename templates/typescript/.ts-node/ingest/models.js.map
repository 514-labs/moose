{"version":3,"file":"models.js","sourceRoot":"","sources":["../../app/ingest/models.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAuC;AACvC,gDAAyD;AAOzD,0DAA0D;AAC1D,wEAAwE;AAC3D,QAAA,WAAW,GAAG,IAAI,0BAAc,CAAM,KAAK,EAAE;IACtD,KAAK,EAAE,KAAK;IACZ,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,IAAI;CACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAEK,IAAI,CAAC,KAAK,CAAC,mbAAmb,CAAQ,CAAC,CAAC;AAQ9c,+FAA+F;AAC/F,sEAAsE;AACzD,QAAA,WAAW,GAAG,IAAI,0BAAc,CAAM,KAAK,EAAE;IACtD,KAAK,EAAE,IAAI;IACX,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,KAAK;CAChB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAEK,IAAI,CAAC,KAAK,CAAC,mkBAAmkB,CAAQ,CAAC,CAAC","sourcesContent":["import ____moose____typia from \"typia\";\nimport { IngestPipeline, Key } from \"@514labs/moose-lib\";\n//Sample data model \"Foo\"\nexport interface Foo {\n    primaryKey: Key<string>;\n    timestamp: number;\n    optionalText?: string;\n}\n//Automatically generate an ingest pipeline typed to \"Foo\"\n//Includes an API endpoint and a streaming buffer - but no landing table\nexport const FooPipeline = new IngestPipeline<Foo>(\"Foo\", {\n    table: false,\n    stream: true,\n    ingest: true,\n}, ____moose____typia.json.schemas<[\n    Foo\n]>(), JSON.parse(\"[{\\\"name\\\":\\\"primaryKey\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":true,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"timestamp\\\",\\\"data_type\\\":\\\"Float\\\",\\\"primary_key\\\":false,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"optionalText\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]}]\") as any);\n//Sample data model \"Bar\" \nexport interface Bar {\n    primaryKey: Key<string>;\n    utcTimestamp: Date;\n    hasText: boolean;\n    textLength: number;\n}\n//Automatically generate an ingest pipeline typed to \"Bar\" (a downstream data model from \"Foo\")\n//Includes a streaming buffer and a landing table, but no API endpoint\nexport const BarPipeline = new IngestPipeline<Bar>(\"Bar\", {\n    table: true,\n    stream: true,\n    ingest: false,\n}, ____moose____typia.json.schemas<[\n    Bar\n]>(), JSON.parse(\"[{\\\"name\\\":\\\"primaryKey\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":true,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"utcTimestamp\\\",\\\"data_type\\\":\\\"DateTime\\\",\\\"primary_key\\\":false,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"hasText\\\",\\\"data_type\\\":\\\"Boolean\\\",\\\"primary_key\\\":false,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"textLength\\\",\\\"data_type\\\":\\\"Float\\\",\\\"primary_key\\\":false,\\\"required\\\":true,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]}]\") as any);\n"]}