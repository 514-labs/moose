{"version":3,"file":"bar.js","sourceRoot":"","sources":["../../app/apis/bar.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAuC;AACvC,gDAA+E;AASlE,QAAA,MAAM,GAAG,IAAI,0BAAc,CAAc,KAAK,EAAE,UAAC,MAAM,EAAE,KAAK;IACvE,IAAM,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sGAA2D,CAAC;IAC7E,IAAM,YAAY,GAAG,IAAI,eAAe,CAAC,MAAa,CAAC,CAAC;IACxD,IAAM,eAAe,GAAG,WAAW,CAAC,YAAY,CAAC,CAAC;IAClD,OAAO,CAAC,yEAAO,EAA+D,EAAE,EAAe;;YAA9E,eAAqB,EAArB,OAAO,mBAAG,WAAW,KAAA,EAAE,aAAS,EAAT,KAAK,mBAAG,CAAC,KAAA,EAAE,gBAAY,EAAZ,QAAQ,mBAAG,CAAC,KAAA,EAAE,cAAW,EAAX,MAAM,mBAAG,EAAE,KAAA;YAAM,MAAM,YAAA,EAAE,GAAG,SAAA;;;;oBACnF,KAAK,GAAG,GAAG,qSAAC,sDAGd,EAAkB,2EAGJ,EAAQ,iCACJ,EAAM,qBACjB,EAAkB,uBACrB,EAAK,UACd,KAPK,8BAAE,CAAC,MAAM,CAAC,OAAO,CAAC,EAGJ,QAAQ,EACJ,MAAM,EACjB,8BAAE,CAAC,MAAM,CAAC,OAAO,CAAC,EACrB,KAAK,CACd,CAAC;oBACa,qBAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAMpC,KAAK,CAAC,EAAA;;oBANH,IAAI,GAAG,SAMJ;oBACT,sBAAO,IAAI,EAAC;;;SACf,CAAC,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;AAC/B,CAAC,EAAE,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAEC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAQ,CAAC,CAAC","sourcesContent":["import ____moose____typia from \"typia\";\nimport { ConsumptionHelpers as CH, ConsumptionApi, } from \"@514labs/moose-lib\";\nimport { tags } from \"typia\";\n// This file is where you can define your APIs to consume your data\ninterface QueryParams {\n    orderBy: \"totalRows\" | \"rowsWithText\" | \"maxTextLength\" | \"totalTextLength\";\n    limit?: number;\n    startDay?: number & tags.Type<\"int32\"> & tags.Minimum<1> & tags.Maximum<31>;\n    endDay?: number & tags.Type<\"int32\"> & tags.Minimum<1> & tags.Maximum<31>;\n}\nexport const BarApi = new ConsumptionApi<QueryParams>(\"bar\", (params, utils) => {\n    const assertGuard = ____moose____typia.http.createAssertQuery<QueryParams>();\n    const searchParams = new URLSearchParams(params as any);\n    const processedParams = assertGuard(searchParams);\n    return (async ({ orderBy = \"totalRows\", limit = 5, startDay = 1, endDay = 31 }, { client, sql }) => {\n        const query = sql `\n        SELECT \n          dayOfMonth,\n          ${CH.column(orderBy)}\n        FROM BarAggregated_MV\n        WHERE \n          dayOfMonth >= ${startDay} \n          AND dayOfMonth <= ${endDay}\n        ORDER BY ${CH.column(orderBy)} DESC\n        LIMIT ${limit}\n      `;\n        const data = await client.query.execute<{\n            dayOfMonth: number;\n            totalRows?: number;\n            rowsWithText?: number;\n            maxTextLength?: number;\n            totalTextLength?: number;\n        }>(query);\n        return data;\n    })(processedParams, utils);\n}, {}, ____moose____typia.json.schemas<[\n    QueryParams\n]>(), JSON.parse(\"[]\") as any);\n"]}