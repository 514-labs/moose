{"version":3,"file":"1.fetchEvents.js","sourceRoot":"","sources":["../../../app/scripts/getGithubEvents/1.fetchEvents.ts"],"names":[],"mappings":"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","sourcesContent":["import { TaskFunction, TaskDefinition } from \"@514labs/moose-lib\";\nimport { Octokit } from \"@octokit/rest\";\nimport { WatchEventWithRepo, WatchEvent } from \"../../ingest/WatchEvent\";\n\nconst octokit = new Octokit({\n  auth: process.env.GITHUB_TOKEN,\n});\n\n// The initial input data and data passed between tasks can be\n// defined in the task function parameter\nconst load: TaskFunction = async (input?: any) => {\n  const responses = await octokit.paginate.iterator(\n    octokit.activity.listPublicEvents,\n    {\n      per_page: 100,\n    },\n  );\n\n  for await (const response of responses) {\n    for (const event of response.data) {\n      if (event.type === \"WatchEvent\") {\n        const mooseEvent = {\n          eventId: event.id,\n          actorLogin: event.actor.login,\n          actorId: event.actor.id,\n          actorUrl: event.actor.url,\n          actorAvatarUrl: event.actor.avatar_url,\n          repoName: event.repo.name,\n          repoUrl: event.repo.url,\n          repoId: event.repo.id,\n          createdAt: event.created_at ? new Date(event.created_at) : null,\n        } as WatchEvent;\n\n        const repo = await octokit.rest.repos.get({\n          owner: event.repo.name.split(\"/\")[0],\n          repo: event.repo.name.split(\"/\")[1],\n        });\n\n        const repoData = repo.data;\n\n        const mooseEventWithRepo = {\n          ...mooseEvent,\n          repoDescription: repoData.description,\n          repoTopics: repoData.topics,\n          repoLanguage: repoData.language,\n          repoStars: repoData.stargazers_count,\n          repoForks: repoData.forks_count,\n          repoWatchers: repoData.watchers_count,\n          repoOpenIssues: repoData.open_issues_count,\n          repoCreatedAt: repoData.created_at\n            ? new Date(repoData.created_at)\n            : null,\n          repoOwnerLogin: repoData.owner.login,\n          repoOwnerId: repoData.owner.id,\n          repoOwnerUrl: repoData.owner.url,\n          repoOwnerAvatarUrl: repoData.owner.avatar_url,\n          repoOwnerType: repoData.owner.type,\n          repoOrgId: repoData.organization?.id,\n          repoOrgUrl: repoData.organization?.url,\n          repoOrgLogin: repoData.organization?.login,\n          repoHomepage: repoData.homepage,\n        } as WatchEventWithRepo;\n\n        await fetch(\"http://localhost:4000/ingest/watch-event\", {\n          method: \"POST\",\n          body: JSON.stringify(mooseEventWithRepo),\n        });\n      }\n    }\n  }\n\n  return {\n    task: \"load\",\n    data: {},\n  };\n};\n\nexport default function createTask() {\n  return {\n    task: load,\n    config: {\n      retries: 3,\n    },\n  } as TaskDefinition;\n}\n"]}