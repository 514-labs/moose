{"version":3,"file":"2.load.js","sourceRoot":"","sources":["../../../app/scripts/getGithubEvents/2.load.ts"],"names":[],"mappings":"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","sourcesContent":["import { TaskFunction, TaskDefinition } from \"@514labs/moose-lib\";\nimport {\n  FetchEventsOutput,\n  createOctokit,\n  RepoType,\n  RepoRequestOptions,\n  RepoResponseType,\n  createGraphqlClient,\n  GitHubRepository,\n  fetchReposBatchWithRetry\n} from \"../utils\";\nimport { WatchEvent, WatchEventWithRepo } from \"../../datamodels/WatchEvent\";\nimport { cliLog } from \"@514labs/moose-lib\";\nimport { graphql, GraphQlQueryResponseData } from \"@octokit/graphql\";\n// The initial input data and data passed between tasks can be\n// defined in the task function parameter\n\nconst EVENT_TYPES = new Set([\"WatchEvent\", \"PushEvent\", \"ForkEvent\", \"PullRequestEvent\", \"CreatedEvent\"]);\n\n\ntype RepoInfo = {\n  repository: {\n    description: string | null;\n    primaryLanguage: {\n      name: string;\n    } | null;\n    repositoryTopics: {\n      nodes: Array<{\n        topic: {\n          name: string;\n        };\n      }>;\n    };\n    owner: {\n      login: string;\n      id: string;\n      __typename: string;\n    };\n  } | null;\n};\n\ntype BatchQuery = {\n  [key: string]: RepoInfo;\n};\n\nconst BATCH_SIZE = 5;\nconst DELAY_BETWEEN_BATCHES = 1000;\n\nconst load: TaskFunction = async (input?: FetchEventsOutput) => {\n  if (!input || input.noNewEvents) {\n    return {\n      task: \"load\",\n      data: { eventsLoaded: 0 },\n    };\n  }\n\n  const repos = Array.from(new Set(\n    input.events\n      .filter(event => event.type && EVENT_TYPES.has(event.type))\n      .map(event => event.repo.name)\n  )).map(fullName => {\n    const [owner, name] = fullName.split('/');\n    return { owner, name };\n  });\n\n  const repoDataMap = new Map<string, GitHubRepository>();\n  \n  // Process in batches\n  for (let i = 0; i < repos.length; i += BATCH_SIZE) {\n    if (i > 0) await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_BATCHES));\n    \n    const batch = repos.slice(i, i + BATCH_SIZE);\n    try {\n      const batchResults = await fetchReposBatchWithRetry(batch);\n      batchResults.forEach((value, key) => repoDataMap.set(key, value));\n      \n      cliLog({\n        action: \"fetchRepos\",\n        message: `Processed batch ${Math.floor(i/BATCH_SIZE) + 1}/${Math.ceil(repos.length/BATCH_SIZE)}`,\n        message_type: \"Info\",\n      });\n    } catch (error) {\n      cliLog({\n        action: \"fetchRepos\",\n        message: `Error fetching repos batch: ${error}`,\n        message_type: \"Error\",\n      });\n    }\n  }\n\n  // Process events with type safety\n  for (const event of input.events) {\n    if (event.type && EVENT_TYPES.has(event.type)) {\n      const mooseEvent: WatchEvent = {\n        eventId: event.id,\n        actorLogin: event.actor.login,\n        actorId: event.actor.id,\n        actorUrl: event.actor.url,\n        actorAvatarUrl: event.actor.avatar_url,\n        repoName: event.repo.name,\n        repoUrl: event.repo.url,\n        repoId: event.repo.id,\n        createdAt: event.created_at ? new Date(event.created_at) : new Date(),\n      };\n\n      const repoData = repoDataMap.get(event.repo.name);\n      if (!repoData) continue;\n\n      const mooseEventWithRepo: WatchEventWithRepo = {\n        ...mooseEvent,\n        repoDescription: repoData.description ?? undefined,\n        repoTopics: repoData.repositoryTopics.nodes.map(n => n.topic.name),\n        repoLanguage: repoData.primaryLanguage?.name ?? undefined,\n        repoStars: repoData.stargazerCount,\n        repoForks: repoData.forkCount,\n        repoWatchers: repoData.watchers.totalCount,\n        repoOpenIssues: repoData.issues.totalCount,\n        repoCreatedAt: new Date(repoData.createdAt),\n        repoOwnerLogin: repoData.owner.login,\n        repoOwnerId: repoData.owner.id,\n        repoOwnerUrl: repoData.owner.url,\n        repoOwnerAvatarUrl: repoData.owner.avatarUrl,\n        repoOwnerType: repoData.owner.__typename,\n        repoOrgId: repoData.owner.__typename === 'Organization' ? parseInt(repoData.owner.id) : undefined,\n        repoOrgUrl: repoData.owner.__typename === 'Organization' ? repoData.owner.url : undefined,\n        repoOrgLogin: repoData.owner.__typename === 'Organization' ? repoData.owner.login : undefined,\n        repoHomepage: repoData.homepageUrl ?? undefined,\n      };\n\n      await fetch(\"http://localhost:4000/ingest/WatchEventWithRepo\", {\n        method: \"POST\",\n        body: JSON.stringify(mooseEventWithRepo),\n      });\n    }\n  }\n\n  return {\n    task: \"load\",\n    data: {\n      eventsLoaded: input.count,\n      loadedAt: new Date().toISOString(),\n    },\n  };\n};\n\nexport default function createTask() {\n  return {\n    task: load,\n    config: {\n      retries: 3,\n    },\n  } as TaskDefinition;\n}\n"]}