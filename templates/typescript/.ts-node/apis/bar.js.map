{"version":3,"file":"bar.js","sourceRoot":"","sources":["../../app/apis/bar.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAuC;AACvC,gDAA8E;AAC9E,wCAAiD;AAgBpC,QAAA,MAAM,GAAG,IAAI,0BAAc,CAA8B,KAAK,EAAE,UAAC,MAAM,EAAE,KAAK;IACvF,IAAM,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sGAA2D,CAAC;IAC7E,IAAM,YAAY,GAAG,IAAI,eAAe,CAAC,MAAa,CAAC,CAAC;IACxD,IAAM,eAAe,GAAG,WAAW,CAAC,YAAY,CAAC,CAAC;IAClD,OAAO,CAAC,yEAAO,EAA6E,EAAE,EAAe;;YAA5F,eAAqB,EAArB,OAAO,mBAAG,WAAW,KAAA,EAAE,aAAS,EAAT,KAAK,mBAAG,CAAC,KAAA,EAAE,gBAAY,EAAZ,QAAQ,mBAAG,CAAC,KAAA,EAAE,cAAW,EAAX,MAAM,mBAAG,EAAE,KAAA;YAAoB,MAAM,YAAA,EAAE,GAAG,SAAA;;;;oBACjG,MAAM,GAAG,uBAAe,CAAC,WAAY,CAAC,OAAO,CAAC;oBAC9C,KAAK,GAAG,GAAG,0SAAC,+BAEd,EAAiB,6BACjB,EAAe,wEAGD,EAAQ,iCACJ,EAAM,qBACjB,EAAe,uBAClB,EAAK,UACd,KARK,MAAM,CAAC,UAAU,EACjB,MAAM,CAAC,OAAO,CAAC,EAGD,QAAQ,EACJ,MAAM,EACjB,MAAM,CAAC,OAAO,CAAC,EAClB,KAAK,CACd,CAAC;oBACa,qBAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAA;;oBAAxC,IAAI,GAAG,SAAiC;oBACtC,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;wBAAzB,sBAAO,CAAC,SAAiB,CAAmB,EAAC;;;SAChD,CAAC,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;AAC/B,CAAC,EAAE,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAEC,IAAI,CAAC,KAAK,CAAC,sjBAAsjB,CAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAE1kB,CAAC","sourcesContent":["import ____moose____typia from \"typia\";\nimport { ConsumptionApi, ConsumptionHelpers as CH } from \"@514labs/moose-lib\";\nimport { BarAggregatedMV } from \"../views/views\";\nimport { tags } from \"typia\";\n// Define the query parameters for the GET API endpoint\ninterface QueryParams {\n    orderBy?: \"totalRows\" | \"rowsWithText\" | \"maxTextLength\" | \"totalTextLength\";\n    limit?: number;\n    startDay?: number & tags.Type<\"int32\">;\n    endDay?: number & tags.Type<\"int32\">;\n}\ninterface ResponseBody {\n    dayOfMonth: number;\n    totalRows?: number;\n    rowsWithText?: number;\n    maxTextLength?: number;\n    totalTextLength?: number;\n}\nexport const BarApi = new ConsumptionApi<QueryParams, ResponseBody[]>(\"bar\", (params, utils) => {\n    const assertGuard = ____moose____typia.http.createAssertQuery<QueryParams>();\n    const searchParams = new URLSearchParams(params as any);\n    const processedParams = assertGuard(searchParams);\n    return (async ({ orderBy = \"totalRows\", limit = 5, startDay = 1, endDay = 31, }: QueryParams, { client, sql }) => {\n        const BACols = BarAggregatedMV.targetTable!.columns;\n        const query = sql `\n        SELECT \n          ${BACols.dayOfMonth} as dayOfMonth,\n          ${BACols[orderBy]}\n        FROM BarAggregated\n        WHERE \n          dayOfMonth >= ${startDay} \n          AND dayOfMonth <= ${endDay}\n        ORDER BY ${BACols[orderBy]} DESC\n        LIMIT ${limit}\n      `;\n        const data = await client.query.execute(query);\n        return (await data.json()) as ResponseBody[];\n    })(processedParams, utils);\n}, {}, ____moose____typia.json.schemas<[\n    QueryParams\n]>(), JSON.parse(\"[{\\\"name\\\":\\\"orderBy\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"limit\\\",\\\"data_type\\\":\\\"Float\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"startDay\\\",\\\"data_type\\\":\\\"Float\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"endDay\\\",\\\"data_type\\\":\\\"Float\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]}]\") as any, ____moose____typia.json.schemas<[\n    ResponseBody[]\n]>());\n"]}